
PUTM_EV_Dashboard_2021_soft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005fb4  08005fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060b0  080060b0  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080060b0  080060b0  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060b0  080060b0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060b0  080060b0  000160b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060b4  080060b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080060b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000088  08006140  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08006140  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132c8  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ff  00000000  00000000  00033379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00035d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00036ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b8e  00000000  00000000  00037ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012839  00000000  00000000  00051a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094b23  00000000  00000000  00064297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8dba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d98  00000000  00000000  000f8e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08005f9c 	.word	0x08005f9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08005f9c 	.word	0x08005f9c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <lcdInit>:
#include "lcd_driver.h"


const uint8_t rowAddress[] = {0x00, 0x40};

void lcdInit() {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
    lcdWriteCommand(LCD_INIT_CMD_1);
 8000738:	2033      	movs	r0, #51	; 0x33
 800073a:	f000 f867 	bl	800080c <lcdWriteCommand>
    lcdWriteCommand(LCD_INIT_CMD_2);
 800073e:	2032      	movs	r0, #50	; 0x32
 8000740:	f000 f864 	bl	800080c <lcdWriteCommand>
    lcdWriteCommand(LCD_SET_4_BIT);
 8000744:	2028      	movs	r0, #40	; 0x28
 8000746:	f000 f861 	bl	800080c <lcdWriteCommand>
    lcdWriteCommand(LCD_CLEAR);
 800074a:	2001      	movs	r0, #1
 800074c:	f000 f85e 	bl	800080c <lcdWriteCommand>
    lcdWriteCommand(LCD_RESET_POWER | LCD_TURN_ON);
 8000750:	200c      	movs	r0, #12
 8000752:	f000 f85b 	bl	800080c <lcdWriteCommand>
    lcdWriteCommand(LCD_ENTRY_MODE | LCD_INC_CURSOR);
 8000756:	2006      	movs	r0, #6
 8000758:	f000 f858 	bl	800080c <lcdWriteCommand>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <lcdWriteString>:

void lcdWriteString(char *str) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
    while(*str){
 8000768:	e006      	b.n	8000778 <lcdWriteString+0x18>
        lcdWriteData(*str++);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1c5a      	adds	r2, r3, #1
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f000 f82c 	bl	80007d0 <lcdWriteData>
    while(*str){
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f4      	bne.n	800076a <lcdWriteString+0xa>
    }
}
 8000780:	bf00      	nop
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <lcdMoveCursor>:

void lcdMoveCursor(uint8_t row, uint8_t column) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	460a      	mov	r2, r1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	4613      	mov	r3, r2
 800079a:	71bb      	strb	r3, [r7, #6]
    lcdWriteCommand(LCD_LOC_BASE + rowAddress[row] + column);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	4a07      	ldr	r2, [pc, #28]	; (80007bc <lcdMoveCursor+0x30>)
 80007a0:	5cd2      	ldrb	r2, [r2, r3]
 80007a2:	79bb      	ldrb	r3, [r7, #6]
 80007a4:	4413      	add	r3, r2
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	3b80      	subs	r3, #128	; 0x80
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f82d 	bl	800080c <lcdWriteCommand>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	08006044 	.word	0x08006044

080007c0 <lcdClear>:

void lcdClear() {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    lcdWriteCommand(LCD_CLEAR);
 80007c4:	2001      	movs	r0, #1
 80007c6:	f000 f821 	bl	800080c <lcdWriteCommand>
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <lcdWriteData>:

void lcdWriteData(uint8_t data) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_DATA_REG);
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <lcdWriteData+0x38>)
 80007e2:	f002 fff3 	bl	80037cc <HAL_GPIO_WritePin>

    lcdWrite(data >> 4);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	091b      	lsrs	r3, r3, #4
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 f82b 	bl	8000848 <lcdWrite>
    lcdWrite(data & 0x0F);
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	f003 030f 	and.w	r3, r3, #15
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f824 	bl	8000848 <lcdWrite>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40010800 	.word	0x40010800

0800080c <lcdWriteCommand>:

void lcdWriteCommand(uint8_t command) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_COMMAND_REG);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800081c:	4809      	ldr	r0, [pc, #36]	; (8000844 <lcdWriteCommand+0x38>)
 800081e:	f002 ffd5 	bl	80037cc <HAL_GPIO_WritePin>
    lcdWrite(command >> 4);
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	091b      	lsrs	r3, r3, #4
 8000826:	b2db      	uxtb	r3, r3
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f80d 	bl	8000848 <lcdWrite>
    lcdWrite(command & 0x0F);
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f003 030f 	and.w	r3, r3, #15
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f806 	bl	8000848 <lcdWrite>

}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40010800 	.word	0x40010800

08000848 <lcdWrite>:

void lcdWrite(uint8_t data) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data >> 0) & 0x01);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	b2db      	uxtb	r3, r3
 800085a:	461a      	mov	r2, r3
 800085c:	2110      	movs	r1, #16
 800085e:	481a      	ldr	r0, [pc, #104]	; (80008c8 <lcdWrite+0x80>)
 8000860:	f002 ffb4 	bl	80037cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data >> 1) & 0x01);
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	085b      	lsrs	r3, r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	b2db      	uxtb	r3, r3
 8000870:	461a      	mov	r2, r3
 8000872:	2120      	movs	r1, #32
 8000874:	4814      	ldr	r0, [pc, #80]	; (80008c8 <lcdWrite+0x80>)
 8000876:	f002 ffa9 	bl	80037cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data >> 2) & 0x01);
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	089b      	lsrs	r3, r3, #2
 800087e:	b2db      	uxtb	r3, r3
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	b2db      	uxtb	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	2140      	movs	r1, #64	; 0x40
 800088a:	480f      	ldr	r0, [pc, #60]	; (80008c8 <lcdWrite+0x80>)
 800088c:	f002 ff9e 	bl	80037cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data >> 3) & 0x01);
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	08db      	lsrs	r3, r3, #3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	461a      	mov	r2, r3
 800089e:	2180      	movs	r1, #128	; 0x80
 80008a0:	4809      	ldr	r0, [pc, #36]	; (80008c8 <lcdWrite+0x80>)
 80008a2:	f002 ff93 	bl	80037cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, 1);
 80008a6:	2201      	movs	r2, #1
 80008a8:	2108      	movs	r1, #8
 80008aa:	4807      	ldr	r0, [pc, #28]	; (80008c8 <lcdWrite+0x80>)
 80008ac:	f002 ff8e 	bl	80037cc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f001 fb49 	bl	8001f48 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2108      	movs	r1, #8
 80008ba:	4803      	ldr	r0, [pc, #12]	; (80008c8 <lcdWrite+0x80>)
 80008bc:	f002 ff86 	bl	80037cc <HAL_GPIO_WritePin>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40010c00 	.word	0x40010c00

080008cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008d2:	f001 fad7 	bl	8001e84 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008d6:	f000 f877 	bl	80009c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008da:	f000 fa93 	bl	8000e04 <MX_GPIO_Init>
	MX_DMA_Init();
 80008de:	f000 fa6b 	bl	8000db8 <MX_DMA_Init>
	MX_CAN_Init();
 80008e2:	f000 f905 	bl	8000af0 <MX_CAN_Init>
	MX_SPI1_Init();
 80008e6:	f000 f937 	bl	8000b58 <MX_SPI1_Init>
	MX_SPI2_Init();
 80008ea:	f000 f96b 	bl	8000bc4 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 80008ee:	f000 fa39 	bl	8000d64 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80008f2:	f000 f99d 	bl	8000c30 <MX_TIM2_Init>
	MX_ADC1_Init();
 80008f6:	f000 f8bd 	bl	8000a74 <MX_ADC1_Init>
	MX_TIM3_Init();
 80008fa:	f000 f9e5 	bl	8000cc8 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	My_CAN_init();
 80008fe:	f000 fad7 	bl	8000eb0 <My_CAN_init>

	HAL_TIM_Base_Start_IT(&htim2);
 8000902:	4828      	ldr	r0, [pc, #160]	; (80009a4 <main+0xd8>)
 8000904:	f003 ff1a 	bl	800473c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000908:	4827      	ldr	r0, [pc, #156]	; (80009a8 <main+0xdc>)
 800090a:	f003 ff17 	bl	800473c <HAL_TIM_Base_Start_IT>

	updateDisplays = 0;
 800090e:	4b27      	ldr	r3, [pc, #156]	; (80009ac <main+0xe0>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
	speedOrHvPer = 0;
 8000914:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <main+0xe4>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
	error = 0;
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <main+0xe8>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
	ledArray1 = 0;
 8000920:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <main+0xec>)
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]

	lcdInit();
 8000926:	f7ff ff05 	bl	8000734 <lcdInit>
	lcdMoveCursor(0, 0);
 800092a:	2100      	movs	r1, #0
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff ff2d 	bl	800078c <lcdMoveCursor>
	lcdWriteString("Hello");
 8000932:	4822      	ldr	r0, [pc, #136]	; (80009bc <main+0xf0>)
 8000934:	f7ff ff14 	bl	8000760 <lcdWriteString>
	lcdMoveCursor(1, 2);
 8000938:	2102      	movs	r1, #2
 800093a:	2001      	movs	r0, #1
 800093c:	f7ff ff26 	bl	800078c <lcdMoveCursor>
	lcdWriteString("Hey");
 8000940:	481f      	ldr	r0, [pc, #124]	; (80009c0 <main+0xf4>)
 8000942:	f7ff ff0d 	bl	8000760 <lcdWriteString>

	changeSegTimeStamp = 100;
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <main+0xf8>)
 8000948:	2264      	movs	r2, #100	; 0x64
 800094a:	601a      	str	r2, [r3, #0]
	speedOrHvPer = 1;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <main+0xe4>)
 800094e:	2201      	movs	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		//Show();
		 uint8_t status = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	71fb      	strb	r3, [r7, #7]
		 if (updateDisplays) {
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <main+0xe0>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d01c      	beq.n	8000998 <main+0xcc>
		 #ifndef TEST
		 // send data to LED
		 status |= sendLed();
 800095e:	f001 f8c7 	bl	8001af0 <sendLed>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	4313      	orrs	r3, r2
 800096a:	71fb      	strb	r3, [r7, #7]

		 // send data to 7seg displays
		 status |= send7Seg();
 800096c:	f001 f93c 	bl	8001be8 <send7Seg>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	4313      	orrs	r3, r2
 8000978:	71fb      	strb	r3, [r7, #7]

		 // send data to alfanum display
		 status |= sendAlfaNum();
 800097a:	f001 f95d 	bl	8001c38 <sendAlfaNum>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	4313      	orrs	r3, r2
 8000986:	71fb      	strb	r3, [r7, #7]
		 #else
		 test();
		 #endif

		 if (status != HAL_OK) {
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <main+0xc6>
		 Error_Handler();
 800098e:	f000 facf 	bl	8000f30 <Error_Handler>
		 }
		 updateDisplays = 0;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <main+0xe0>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
		 }

		 if (status) {
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0d9      	beq.n	8000952 <main+0x86>
		 Error_Handler();
 800099e:	f000 fac7 	bl	8000f30 <Error_Handler>
	while (1) {
 80009a2:	e7d6      	b.n	8000952 <main+0x86>
 80009a4:	200002c0 	.word	0x200002c0
 80009a8:	20000190 	.word	0x20000190
 80009ac:	20000255 	.word	0x20000255
 80009b0:	2000020c 	.word	0x2000020c
 80009b4:	2000025e 	.word	0x2000025e
 80009b8:	20000208 	.word	0x20000208
 80009bc:	08005fc4 	.word	0x08005fc4
 80009c0:	08005fcc 	.word	0x08005fcc
 80009c4:	20000258 	.word	0x20000258

080009c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b094      	sub	sp, #80	; 0x50
 80009cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d2:	2228      	movs	r2, #40	; 0x28
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f004 fe8a 	bl	80056f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f8:	2302      	movs	r3, #2
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009fc:	2301      	movs	r3, #1
 80009fe:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a00:	2310      	movs	r3, #16
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a04:	2302      	movs	r3, #2
 8000a06:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000a0c:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000a10:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 ff0a 	bl	8003830 <HAL_RCC_OscConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0x5e>
		Error_Handler();
 8000a22:	f000 fa85 	bl	8000f30 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a26:	230f      	movs	r3, #15
 8000a28:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	2101      	movs	r1, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f003 f975 	bl	8003d30 <HAL_RCC_ClockConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x88>
		Error_Handler();
 8000a4c:	f000 fa70 	bl	8000f30 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a50:	2302      	movs	r3, #2
 8000a52:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000a54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a58:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 fb01 	bl	8004064 <HAL_RCCEx_PeriphCLKConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0xa4>
		Error_Handler();
 8000a68:	f000 fa62 	bl	8000f30 <Error_Handler>
	}
}
 8000a6c:	bf00      	nop
 8000a6e:	3750      	adds	r7, #80	; 0x50
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_ADC1_Init+0x74>)
 8000a86:	4a19      	ldr	r2, [pc, #100]	; (8000aec <MX_ADC1_Init+0x78>)
 8000a88:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_ADC1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_ADC1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_ADC1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_ADC1_Init+0x74>)
 8000a9e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000aa2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_ADC1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_ADC1_Init+0x74>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_ADC1_Init+0x74>)
 8000ab2:	f001 fa6d 	bl	8001f90 <HAL_ADC_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8000abc:	f000 fa38 	bl	8000f30 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_ADC1_Init+0x74>)
 8000ad2:	f001 fb35 	bl	8002140 <HAL_ADC_ConfigChannel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8000adc:	f000 fa28 	bl	8000f30 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200001d8 	.word	0x200001d8
 8000aec:	40012400 	.word	0x40012400

08000af0 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_CAN_Init+0x60>)
 8000af6:	4a17      	ldr	r2, [pc, #92]	; (8000b54 <MX_CAN_Init+0x64>)
 8000af8:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_CAN_Init+0x60>)
 8000afc:	2210      	movs	r2, #16
 8000afe:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_CAN_Init+0x60>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_CAN_Init+0x60>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_CAN_Init+0x60>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_CAN_Init+0x60>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <MX_CAN_Init+0x60>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_CAN_Init+0x60>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_CAN_Init+0x60>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_CAN_Init+0x60>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <MX_CAN_Init+0x60>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_CAN_Init+0x60>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_CAN_Init+0x60>)
 8000b3e:	f001 fc38 	bl	80023b2 <HAL_CAN_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_CAN_Init+0x5c>
		Error_Handler();
 8000b48:	f000 f9f2 	bl	8000f30 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000168 	.word	0x20000168
 8000b54:	40006400 	.word	0x40006400

08000b58 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <MX_SPI1_Init+0x64>)
 8000b5e:	4a18      	ldr	r2, [pc, #96]	; (8000bc0 <MX_SPI1_Init+0x68>)
 8000b60:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_SPI1_Init+0x64>)
 8000b64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b68:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_SPI1_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <MX_SPI1_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_SPI1_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_SPI1_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_SPI1_Init+0x64>)
 8000b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b88:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_SPI1_Init+0x64>)
 8000b8c:	2228      	movs	r2, #40	; 0x28
 8000b8e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <MX_SPI1_Init+0x64>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_SPI1_Init+0x64>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <MX_SPI1_Init+0x64>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_SPI1_Init+0x64>)
 8000ba4:	220a      	movs	r2, #10
 8000ba6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <MX_SPI1_Init+0x64>)
 8000baa:	f003 fb11 	bl	80041d0 <HAL_SPI_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000bb4:	f000 f9bc 	bl	8000f30 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000260 	.word	0x20000260
 8000bc0:	40013000 	.word	0x40013000

08000bc4 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <MX_SPI2_Init+0x64>)
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <MX_SPI2_Init+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_SPI2_Init+0x64>)
 8000bd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bd4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_SPI2_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_SPI2_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_SPI2_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_SPI2_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_SPI2_Init+0x64>)
 8000bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf4:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_SPI2_Init+0x64>)
 8000bf8:	2220      	movs	r2, #32
 8000bfa:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <MX_SPI2_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_SPI2_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <MX_SPI2_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_SPI2_Init+0x64>)
 8000c10:	220a      	movs	r2, #10
 8000c12:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <MX_SPI2_Init+0x64>)
 8000c16:	f003 fadb 	bl	80041d0 <HAL_SPI_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_SPI2_Init+0x60>
		Error_Handler();
 8000c20:	f000 f986 	bl	8000f30 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000108 	.word	0x20000108
 8000c2c:	40003800 	.word	0x40003800

08000c30 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c44:	463b      	mov	r3, r7
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000c4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c52:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 31999;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000c56:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000c5a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 49;
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000c64:	2231      	movs	r2, #49	; 0x31
 8000c66:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000c74:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000c76:	f003 fd11 	bl	800469c <HAL_TIM_Base_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000c80:	f000 f956 	bl	8000f30 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c88:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000c92:	f003 fead 	bl	80049f0 <HAL_TIM_ConfigClockSource>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000c9c:	f000 f948 	bl	8000f30 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000cae:	f004 f889 	bl	8004dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000cb8:	f000 f93a 	bl	8000f30 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200002c0 	.word	0x200002c0

08000cc8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000cdc:	463b      	mov	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_TIM3_Init+0x94>)
 8000ce6:	4a1e      	ldr	r2, [pc, #120]	; (8000d60 <MX_TIM3_Init+0x98>)
 8000ce8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_TIM3_Init+0x94>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_TIM3_Init+0x94>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_TIM3_Init+0x94>)
 8000cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cfc:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_TIM3_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_TIM3_Init+0x94>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000d0a:	4814      	ldr	r0, [pc, #80]	; (8000d5c <MX_TIM3_Init+0x94>)
 8000d0c:	f003 fcc6 	bl	800469c <HAL_TIM_Base_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM3_Init+0x52>
		Error_Handler();
 8000d16:	f000 f90b 	bl	8000f30 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	4619      	mov	r1, r3
 8000d26:	480d      	ldr	r0, [pc, #52]	; (8000d5c <MX_TIM3_Init+0x94>)
 8000d28:	f003 fe62 	bl	80049f0 <HAL_TIM_ConfigClockSource>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM3_Init+0x6e>
		Error_Handler();
 8000d32:	f000 f8fd 	bl	8000f30 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <MX_TIM3_Init+0x94>)
 8000d44:	f004 f83e 	bl	8004dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000d4e:	f000 f8ef 	bl	8000f30 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000190 	.word	0x20000190
 8000d60:	40000400 	.word	0x40000400

08000d64 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <MX_USART1_UART_Init+0x50>)
 8000d6c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d74:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d90:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d94:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d9e:	f004 f881 	bl	8004ea4 <HAL_UART_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_USART1_UART_Init+0x48>
		Error_Handler();
 8000da8:	f000 f8c2 	bl	8000f30 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000210 	.word	0x20000210
 8000db4:	40013800 	.word	0x40013800

08000db8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <MX_DMA_Init+0x48>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	; (8000e00 <MX_DMA_Init+0x48>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6153      	str	r3, [r2, #20]
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <MX_DMA_Init+0x48>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	200d      	movs	r0, #13
 8000ddc:	f002 f92b 	bl	8003036 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000de0:	200d      	movs	r0, #13
 8000de2:	f002 f944 	bl	800306e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	200f      	movs	r0, #15
 8000dec:	f002 f923 	bl	8003036 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000df0:	200f      	movs	r0, #15
 8000df2:	f002 f93c 	bl	800306e <HAL_NVIC_EnableIRQ>

}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000

08000e04 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a21      	ldr	r2, [pc, #132]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e36:	f043 0308 	orr.w	r3, r3, #8
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin | LCD_RS_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f248 0110 	movw	r1, #32784	; 0x8010
 8000e4e:	4816      	ldr	r0, [pc, #88]	; (8000ea8 <MX_GPIO_Init+0xa4>)
 8000e50:	f002 fcbc 	bl	80037cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000e54:	2200      	movs	r2, #0
 8000e56:	f241 01f8 	movw	r1, #4344	; 0x10f8
 8000e5a:	4814      	ldr	r0, [pc, #80]	; (8000eac <MX_GPIO_Init+0xa8>)
 8000e5c:	f002 fcb6 	bl	80037cc <HAL_GPIO_WritePin>
			SPI2_NSS_Pin | LCD_E_Pin | LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin
					| LCD_D7_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : SPI1_NSS_Pin LCD_RS_Pin */
	GPIO_InitStruct.Pin = SPI1_NSS_Pin | LCD_RS_Pin;
 8000e60:	f248 0310 	movw	r3, #32784	; 0x8010
 8000e64:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4619      	mov	r1, r3
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <MX_GPIO_Init+0xa4>)
 8000e7a:	f002 fb23 	bl	80034c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI2_NSS_Pin LCD_E_Pin LCD_D4_Pin LCD_D5_Pin
	 LCD_D6_Pin LCD_D7_Pin */
	GPIO_InitStruct.Pin = SPI2_NSS_Pin | LCD_E_Pin | LCD_D4_Pin | LCD_D5_Pin
 8000e7e:	f241 03f8 	movw	r3, #4344	; 0x10f8
 8000e82:	60bb      	str	r3, [r7, #8]
			| LCD_D6_Pin | LCD_D7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	4619      	mov	r1, r3
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_GPIO_Init+0xa8>)
 8000e98:	f002 fb14 	bl	80034c4 <HAL_GPIO_Init>

}
 8000e9c:	bf00      	nop
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010800 	.word	0x40010800
 8000eac:	40010c00 	.word	0x40010c00

08000eb0 <My_CAN_init>:

/* USER CODE BEGIN 4 */
void My_CAN_init(void) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	sFilterConfig.FilterBank = 0;
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <My_CAN_init+0x78>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <My_CAN_init+0x78>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <My_CAN_init+0x78>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	61da      	str	r2, [r3, #28]
//sFilterConfig.FilterIdHigh = 0x0A << 5;
	sFilterConfig.FilterIdHigh = 0x0000;
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <My_CAN_init+0x78>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <My_CAN_init+0x78>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	605a      	str	r2, [r3, #4]
//sFilterConfig.FilterMaskIdHigh = 0xFFFF << 5;
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <My_CAN_init+0x78>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <My_CAN_init+0x78>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <My_CAN_init+0x78>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000ee4:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <My_CAN_init+0x78>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <My_CAN_init+0x78>)
 8000eec:	220e      	movs	r2, #14
 8000eee:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 8000ef0:	490d      	ldr	r1, [pc, #52]	; (8000f28 <My_CAN_init+0x78>)
 8000ef2:	480e      	ldr	r0, [pc, #56]	; (8000f2c <My_CAN_init+0x7c>)
 8000ef4:	f001 fb58 	bl	80025a8 <HAL_CAN_ConfigFilter>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <My_CAN_init+0x52>
		Error_Handler();
 8000efe:	f000 f817 	bl	8000f30 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000f02:	480a      	ldr	r0, [pc, #40]	; (8000f2c <My_CAN_init+0x7c>)
 8000f04:	f001 fc19 	bl	800273a <HAL_CAN_Start>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <My_CAN_init+0x62>
		Error_Handler();
 8000f0e:	f000 f80f 	bl	8000f30 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan,
 8000f12:	2103      	movs	r1, #3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <My_CAN_init+0x7c>)
 8000f16:	f001 fd65 	bl	80029e4 <HAL_CAN_ActivateNotification>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <My_CAN_init+0x74>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 8000f20:	f000 f806 	bl	8000f30 <Error_Handler>
	}
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200000dc 	.word	0x200000dc
 8000f2c:	20000168 	.word	0x20000168

08000f30 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f34:	2120      	movs	r1, #32
 8000f36:	4802      	ldr	r0, [pc, #8]	; (8000f40 <Error_Handler+0x10>)
 8000f38:	f002 fc60 	bl	80037fc <HAL_GPIO_TogglePin>
	while (1) {
 8000f3c:	e7fe      	b.n	8000f3c <Error_Handler+0xc>
 8000f3e:	bf00      	nop
 8000f40:	40010800 	.word	0x40010800

08000f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6193      	str	r3, [r2, #24]
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	61d3      	str	r3, [r2, #28]
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_MspInit+0x60>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_MspInit+0x60>)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010000 	.word	0x40010000

08000fa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a14      	ldr	r2, [pc, #80]	; (8001014 <HAL_ADC_MspInit+0x6c>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d121      	bne.n	800100c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_ADC_MspInit+0x70>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a12      	ldr	r2, [pc, #72]	; (8001018 <HAL_ADC_MspInit+0x70>)
 8000fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_ADC_MspInit+0x70>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_ADC_MspInit+0x70>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <HAL_ADC_MspInit+0x70>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_ADC_MspInit+0x70>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	4619      	mov	r1, r3
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <HAL_ADC_MspInit+0x74>)
 8001008:	f002 fa5c 	bl	80034c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800100c:	bf00      	nop
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40012400 	.word	0x40012400
 8001018:	40021000 	.word	0x40021000
 800101c:	40010800 	.word	0x40010800

08001020 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a29      	ldr	r2, [pc, #164]	; (80010e0 <HAL_CAN_MspInit+0xc0>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d14b      	bne.n	80010d8 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001040:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <HAL_CAN_MspInit+0xc4>)
 8001042:	69db      	ldr	r3, [r3, #28]
 8001044:	4a27      	ldr	r2, [pc, #156]	; (80010e4 <HAL_CAN_MspInit+0xc4>)
 8001046:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800104a:	61d3      	str	r3, [r2, #28]
 800104c:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <HAL_CAN_MspInit+0xc4>)
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <HAL_CAN_MspInit+0xc4>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <HAL_CAN_MspInit+0xc4>)
 800105e:	f043 0308 	orr.w	r3, r3, #8
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <HAL_CAN_MspInit+0xc4>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	4818      	ldr	r0, [pc, #96]	; (80010e8 <HAL_CAN_MspInit+0xc8>)
 8001086:	f002 fa1d 	bl	80034c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800108a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800108e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	4812      	ldr	r0, [pc, #72]	; (80010e8 <HAL_CAN_MspInit+0xc8>)
 80010a0:	f002 fa10 	bl	80034c4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <HAL_CAN_MspInit+0xcc>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_CAN_MspInit+0xcc>)
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2100      	movs	r1, #0
 80010cc:	2014      	movs	r0, #20
 80010ce:	f001 ffb2 	bl	8003036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80010d2:	2014      	movs	r0, #20
 80010d4:	f001 ffcb 	bl	800306e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40006400 	.word	0x40006400
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010c00 	.word	0x40010c00
 80010ec:	40010000 	.word	0x40010000

080010f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a5d      	ldr	r2, [pc, #372]	; (8001280 <HAL_SPI_MspInit+0x190>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d156      	bne.n	80011be <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001110:	4b5c      	ldr	r3, [pc, #368]	; (8001284 <HAL_SPI_MspInit+0x194>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a5b      	ldr	r2, [pc, #364]	; (8001284 <HAL_SPI_MspInit+0x194>)
 8001116:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b59      	ldr	r3, [pc, #356]	; (8001284 <HAL_SPI_MspInit+0x194>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b56      	ldr	r3, [pc, #344]	; (8001284 <HAL_SPI_MspInit+0x194>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a55      	ldr	r2, [pc, #340]	; (8001284 <HAL_SPI_MspInit+0x194>)
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b53      	ldr	r3, [pc, #332]	; (8001284 <HAL_SPI_MspInit+0x194>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001140:	23a0      	movs	r3, #160	; 0xa0
 8001142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	4619      	mov	r1, r3
 8001152:	484d      	ldr	r0, [pc, #308]	; (8001288 <HAL_SPI_MspInit+0x198>)
 8001154:	f002 f9b6 	bl	80034c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001158:	2340      	movs	r3, #64	; 0x40
 800115a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0318 	add.w	r3, r7, #24
 8001168:	4619      	mov	r1, r3
 800116a:	4847      	ldr	r0, [pc, #284]	; (8001288 <HAL_SPI_MspInit+0x198>)
 800116c:	f002 f9aa 	bl	80034c4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001170:	4b46      	ldr	r3, [pc, #280]	; (800128c <HAL_SPI_MspInit+0x19c>)
 8001172:	4a47      	ldr	r2, [pc, #284]	; (8001290 <HAL_SPI_MspInit+0x1a0>)
 8001174:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001176:	4b45      	ldr	r3, [pc, #276]	; (800128c <HAL_SPI_MspInit+0x19c>)
 8001178:	2210      	movs	r2, #16
 800117a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800117c:	4b43      	ldr	r3, [pc, #268]	; (800128c <HAL_SPI_MspInit+0x19c>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001182:	4b42      	ldr	r3, [pc, #264]	; (800128c <HAL_SPI_MspInit+0x19c>)
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001188:	4b40      	ldr	r3, [pc, #256]	; (800128c <HAL_SPI_MspInit+0x19c>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800118e:	4b3f      	ldr	r3, [pc, #252]	; (800128c <HAL_SPI_MspInit+0x19c>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001194:	4b3d      	ldr	r3, [pc, #244]	; (800128c <HAL_SPI_MspInit+0x19c>)
 8001196:	2220      	movs	r2, #32
 8001198:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800119a:	4b3c      	ldr	r3, [pc, #240]	; (800128c <HAL_SPI_MspInit+0x19c>)
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011a0:	483a      	ldr	r0, [pc, #232]	; (800128c <HAL_SPI_MspInit+0x19c>)
 80011a2:	f001 ff7f 	bl	80030a4 <HAL_DMA_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 80011ac:	f7ff fec0 	bl	8000f30 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a36      	ldr	r2, [pc, #216]	; (800128c <HAL_SPI_MspInit+0x19c>)
 80011b4:	649a      	str	r2, [r3, #72]	; 0x48
 80011b6:	4a35      	ldr	r2, [pc, #212]	; (800128c <HAL_SPI_MspInit+0x19c>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011bc:	e05c      	b.n	8001278 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI2)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a34      	ldr	r2, [pc, #208]	; (8001294 <HAL_SPI_MspInit+0x1a4>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d157      	bne.n	8001278 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011c8:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <HAL_SPI_MspInit+0x194>)
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	4a2d      	ldr	r2, [pc, #180]	; (8001284 <HAL_SPI_MspInit+0x194>)
 80011ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d2:	61d3      	str	r3, [r2, #28]
 80011d4:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <HAL_SPI_MspInit+0x194>)
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <HAL_SPI_MspInit+0x194>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a27      	ldr	r2, [pc, #156]	; (8001284 <HAL_SPI_MspInit+0x194>)
 80011e6:	f043 0308 	orr.w	r3, r3, #8
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <HAL_SPI_MspInit+0x194>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80011f8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	4619      	mov	r1, r3
 800120c:	4822      	ldr	r0, [pc, #136]	; (8001298 <HAL_SPI_MspInit+0x1a8>)
 800120e:	f002 f959 	bl	80034c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001212:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	4619      	mov	r1, r3
 8001226:	481c      	ldr	r0, [pc, #112]	; (8001298 <HAL_SPI_MspInit+0x1a8>)
 8001228:	f002 f94c 	bl	80034c4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <HAL_SPI_MspInit+0x1ac>)
 800122e:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <HAL_SPI_MspInit+0x1b0>)
 8001230:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <HAL_SPI_MspInit+0x1ac>)
 8001234:	2210      	movs	r2, #16
 8001236:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_SPI_MspInit+0x1ac>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_SPI_MspInit+0x1ac>)
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_SPI_MspInit+0x1ac>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_SPI_MspInit+0x1ac>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_SPI_MspInit+0x1ac>)
 8001252:	2220      	movs	r2, #32
 8001254:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_SPI_MspInit+0x1ac>)
 8001258:	2200      	movs	r2, #0
 800125a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800125c:	480f      	ldr	r0, [pc, #60]	; (800129c <HAL_SPI_MspInit+0x1ac>)
 800125e:	f001 ff21 	bl	80030a4 <HAL_DMA_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_SPI_MspInit+0x17c>
      Error_Handler();
 8001268:	f7ff fe62 	bl	8000f30 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <HAL_SPI_MspInit+0x1ac>)
 8001270:	649a      	str	r2, [r3, #72]	; 0x48
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <HAL_SPI_MspInit+0x1ac>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40013000 	.word	0x40013000
 8001284:	40021000 	.word	0x40021000
 8001288:	40010800 	.word	0x40010800
 800128c:	20000368 	.word	0x20000368
 8001290:	40020030 	.word	0x40020030
 8001294:	40003800 	.word	0x40003800
 8001298:	40010c00 	.word	0x40010c00
 800129c:	20000308 	.word	0x20000308
 80012a0:	40020058 	.word	0x40020058

080012a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b4:	d114      	bne.n	80012e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_TIM_Base_MspInit+0x68>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a14      	ldr	r2, [pc, #80]	; (800130c <HAL_TIM_Base_MspInit+0x68>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_TIM_Base_MspInit+0x68>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	201c      	movs	r0, #28
 80012d4:	f001 feaf 	bl	8003036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012d8:	201c      	movs	r0, #28
 80012da:	f001 fec8 	bl	800306e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012de:	e010      	b.n	8001302 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_TIM_Base_MspInit+0x6c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d10b      	bne.n	8001302 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_TIM_Base_MspInit+0x68>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_TIM_Base_MspInit+0x68>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	61d3      	str	r3, [r2, #28]
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_TIM_Base_MspInit+0x68>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	40000400 	.word	0x40000400

08001314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a20      	ldr	r2, [pc, #128]	; (80013b0 <HAL_UART_MspInit+0x9c>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d139      	bne.n	80013a8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <HAL_UART_MspInit+0xa0>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a1e      	ldr	r2, [pc, #120]	; (80013b4 <HAL_UART_MspInit+0xa0>)
 800133a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <HAL_UART_MspInit+0xa0>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_UART_MspInit+0xa0>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <HAL_UART_MspInit+0xa0>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_UART_MspInit+0xa0>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 8001364:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001368:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4619      	mov	r1, r3
 8001378:	480f      	ldr	r0, [pc, #60]	; (80013b8 <HAL_UART_MspInit+0xa4>)
 800137a:	f002 f8a3 	bl	80034c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800137e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4619      	mov	r1, r3
 8001392:	4809      	ldr	r0, [pc, #36]	; (80013b8 <HAL_UART_MspInit+0xa4>)
 8001394:	f002 f896 	bl	80034c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	2025      	movs	r0, #37	; 0x25
 800139e:	f001 fe4a 	bl	8003036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013a2:	2025      	movs	r0, #37	; 0x25
 80013a4:	f001 fe63 	bl	800306e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40013800 	.word	0x40013800
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010800 	.word	0x40010800

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <HardFault_Handler+0x4>

080013ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <MemManage_Handler+0x4>

080013d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <BusFault_Handler+0x4>

080013da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <UsageFault_Handler+0x4>

080013e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001408:	f000 fd82 	bl	8001f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <DMA1_Channel3_IRQHandler+0x10>)
 8001416:	f001 ff4f 	bl	80032b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000368 	.word	0x20000368

08001424 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <DMA1_Channel5_IRQHandler+0x10>)
 800142a:	f001 ff45 	bl	80032b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000308 	.word	0x20000308

08001438 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
    if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, RxHeader, RxData) == HAL_OK) {
 800143e:	4b6d      	ldr	r3, [pc, #436]	; (80015f4 <USB_LP_CAN1_RX0_IRQHandler+0x1bc>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4b6d      	ldr	r3, [pc, #436]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 8001444:	2100      	movs	r1, #0
 8001446:	486d      	ldr	r0, [pc, #436]	; (80015fc <USB_LP_CAN1_RX0_IRQHandler+0x1c4>)
 8001448:	f001 f9bb 	bl	80027c2 <HAL_CAN_GetRxMessage>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 80c8 	bne.w	80015e4 <USB_LP_CAN1_RX0_IRQHandler+0x1ac>
        if (RxHeader->StdId == CAR_SPEED_ID) {
 8001454:	4b67      	ldr	r3, [pc, #412]	; (80015f4 <USB_LP_CAN1_RX0_IRQHandler+0x1bc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b10      	cmp	r3, #16
 800145c:	d103      	bne.n	8001466 <USB_LP_CAN1_RX0_IRQHandler+0x2e>
            carSpeed = RxData[CAR_SPEED_BYTE];
 800145e:	4b66      	ldr	r3, [pc, #408]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 8001460:	781a      	ldrb	r2, [r3, #0]
 8001462:	4b67      	ldr	r3, [pc, #412]	; (8001600 <USB_LP_CAN1_RX0_IRQHandler+0x1c8>)
 8001464:	701a      	strb	r2, [r3, #0]
        }
        if (RxHeader->StdId == LV_VOLTAGE_ID) {
 8001466:	4b63      	ldr	r3, [pc, #396]	; (80015f4 <USB_LP_CAN1_RX0_IRQHandler+0x1bc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b0c      	cmp	r3, #12
 800146e:	d11d      	bne.n	80014ac <USB_LP_CAN1_RX0_IRQHandler+0x74>
            lvVoltage = (float) (RxData[LV_VOLTAGE_BYTE]+ RxData[LV_VOLTAGE_BYTE+1] + RxData[LV_VOLTAGE_BYTE+2] + RxData[LV_VOLTAGE_BYTE+3] + RxData[LV_VOLTAGE_BYTE+4] + RxData[LV_VOLTAGE_BYTE+5]) / 10.0f;
 8001470:	4b61      	ldr	r3, [pc, #388]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 8001472:	789b      	ldrb	r3, [r3, #2]
 8001474:	461a      	mov	r2, r3
 8001476:	4b60      	ldr	r3, [pc, #384]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 8001478:	78db      	ldrb	r3, [r3, #3]
 800147a:	4413      	add	r3, r2
 800147c:	4a5e      	ldr	r2, [pc, #376]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 800147e:	7912      	ldrb	r2, [r2, #4]
 8001480:	4413      	add	r3, r2
 8001482:	4a5d      	ldr	r2, [pc, #372]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 8001484:	7952      	ldrb	r2, [r2, #5]
 8001486:	4413      	add	r3, r2
 8001488:	4a5b      	ldr	r2, [pc, #364]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 800148a:	7992      	ldrb	r2, [r2, #6]
 800148c:	4413      	add	r3, r2
 800148e:	4a5a      	ldr	r2, [pc, #360]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 8001490:	79d2      	ldrb	r2, [r2, #7]
 8001492:	4413      	add	r3, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7fe ff13 	bl	80002c0 <__aeabi_i2f>
 800149a:	4603      	mov	r3, r0
 800149c:	4959      	ldr	r1, [pc, #356]	; (8001604 <USB_LP_CAN1_RX0_IRQHandler+0x1cc>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f816 	bl	80004d0 <__aeabi_fdiv>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b57      	ldr	r3, [pc, #348]	; (8001608 <USB_LP_CAN1_RX0_IRQHandler+0x1d0>)
 80014aa:	601a      	str	r2, [r3, #0]
        }
        if (RxHeader->StdId == LV_TEMP_A_ID) {
 80014ac:	4b51      	ldr	r3, [pc, #324]	; (80015f4 <USB_LP_CAN1_RX0_IRQHandler+0x1bc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b5f      	cmp	r3, #95	; 0x5f
 80014b4:	d10d      	bne.n	80014d2 <USB_LP_CAN1_RX0_IRQHandler+0x9a>
            lvTempAvg = (float) RxData[LV_TEMP_A_BYTE] / 10.0f;
 80014b6:	4b50      	ldr	r3, [pc, #320]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7fe fefc 	bl	80002b8 <__aeabi_ui2f>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4950      	ldr	r1, [pc, #320]	; (8001604 <USB_LP_CAN1_RX0_IRQHandler+0x1cc>)
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f803 	bl	80004d0 <__aeabi_fdiv>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b4f      	ldr	r3, [pc, #316]	; (800160c <USB_LP_CAN1_RX0_IRQHandler+0x1d4>)
 80014d0:	601a      	str	r2, [r3, #0]
        if (RxHeader->StdId == LV_TEMP_M_ID) {
            lvTempMax = (float) RxData[LV_TEMP_M_BYTE] / 10.0f;

        }
        */
        if (RxHeader->StdId == LV_STATE_ID) {
 80014d2:	4b48      	ldr	r3, [pc, #288]	; (80015f4 <USB_LP_CAN1_RX0_IRQHandler+0x1bc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b0c      	cmp	r3, #12
 80014da:	d103      	bne.n	80014e4 <USB_LP_CAN1_RX0_IRQHandler+0xac>
            lvState = RxData[LV_STATE_BYTE];
 80014dc:	4b46      	ldr	r3, [pc, #280]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 80014de:	785a      	ldrb	r2, [r3, #1]
 80014e0:	4b4b      	ldr	r3, [pc, #300]	; (8001610 <USB_LP_CAN1_RX0_IRQHandler+0x1d8>)
 80014e2:	701a      	strb	r2, [r3, #0]
        }
        if (RxHeader->StdId == HV_VOLTAGE_ID) {
 80014e4:	4b43      	ldr	r3, [pc, #268]	; (80015f4 <USB_LP_CAN1_RX0_IRQHandler+0x1bc>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b0e      	cmp	r3, #14
 80014ec:	d112      	bne.n	8001514 <USB_LP_CAN1_RX0_IRQHandler+0xdc>
            hvVoltage = (float) (RxData[HV_VOLTAGE_BYTE+1] | RxData[HV_VOLTAGE_BYTE] << 8) / 10.0f;
 80014ee:	4b42      	ldr	r3, [pc, #264]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 80014f0:	78db      	ldrb	r3, [r3, #3]
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 80014f6:	789b      	ldrb	r3, [r3, #2]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	4313      	orrs	r3, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe fedf 	bl	80002c0 <__aeabi_i2f>
 8001502:	4603      	mov	r3, r0
 8001504:	493f      	ldr	r1, [pc, #252]	; (8001604 <USB_LP_CAN1_RX0_IRQHandler+0x1cc>)
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe ffe2 	bl	80004d0 <__aeabi_fdiv>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	4b40      	ldr	r3, [pc, #256]	; (8001614 <USB_LP_CAN1_RX0_IRQHandler+0x1dc>)
 8001512:	601a      	str	r2, [r3, #0]
        }
        /*if (RxHeader->StdId == HV_TEMP_A_ID) {
            hvTempAvg = (float) RxData[HV_TEMP_A_BYTE] / 10.0f;
        }*/
        if (RxHeader->StdId == HV_TEMP_M_ID) {
 8001514:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <USB_LP_CAN1_RX0_IRQHandler+0x1bc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b0e      	cmp	r3, #14
 800151c:	d10d      	bne.n	800153a <USB_LP_CAN1_RX0_IRQHandler+0x102>
            hvTempMax = (float) RxData[HV_TEMP_M_BYTE] / 10.0f;
 800151e:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 8001520:	791b      	ldrb	r3, [r3, #4]
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe fec8 	bl	80002b8 <__aeabi_ui2f>
 8001528:	4603      	mov	r3, r0
 800152a:	4936      	ldr	r1, [pc, #216]	; (8001604 <USB_LP_CAN1_RX0_IRQHandler+0x1cc>)
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ffcf 	bl	80004d0 <__aeabi_fdiv>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	4b38      	ldr	r3, [pc, #224]	; (8001618 <USB_LP_CAN1_RX0_IRQHandler+0x1e0>)
 8001538:	601a      	str	r2, [r3, #0]
        }
        if (RxHeader->StdId == HV_STATE_ID) {
 800153a:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <USB_LP_CAN1_RX0_IRQHandler+0x1bc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b0e      	cmp	r3, #14
 8001542:	d103      	bne.n	800154c <USB_LP_CAN1_RX0_IRQHandler+0x114>
            hvState = RxData[HV_STATE_BYTE];
 8001544:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 8001546:	795a      	ldrb	r2, [r3, #5]
 8001548:	4b34      	ldr	r3, [pc, #208]	; (800161c <USB_LP_CAN1_RX0_IRQHandler+0x1e4>)
 800154a:	701a      	strb	r2, [r3, #0]
        }
        if (RxHeader->StdId == WATER_T_1_ID) {
 800154c:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <USB_LP_CAN1_RX0_IRQHandler+0x1bc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b60      	cmp	r3, #96	; 0x60
 8001554:	d10f      	bne.n	8001576 <USB_LP_CAN1_RX0_IRQHandler+0x13e>
            waterTemp1 = RxData[WATER_T_1_BYTE];
 8001556:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 8001558:	799b      	ldrb	r3, [r3, #6]
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe feac 	bl	80002b8 <__aeabi_ui2f>
 8001560:	4603      	mov	r3, r0
 8001562:	4a2f      	ldr	r2, [pc, #188]	; (8001620 <USB_LP_CAN1_RX0_IRQHandler+0x1e8>)
 8001564:	6013      	str	r3, [r2, #0]
            waterTemp2 = RxData[WATER_T_2_BYTE];
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 8001568:	79db      	ldrb	r3, [r3, #7]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe fea4 	bl	80002b8 <__aeabi_ui2f>
 8001570:	4603      	mov	r3, r0
 8001572:	4a2c      	ldr	r2, [pc, #176]	; (8001624 <USB_LP_CAN1_RX0_IRQHandler+0x1ec>)
 8001574:	6013      	str	r3, [r2, #0]
        }
        if (RxHeader->StdId == LCD_BUTTON_ID) {
 8001576:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <USB_LP_CAN1_RX0_IRQHandler+0x1bc>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d110      	bne.n	80015a2 <USB_LP_CAN1_RX0_IRQHandler+0x16a>
            if (RxData[LCD_BUTTON_BYTE]) {
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00c      	beq.n	80015a2 <USB_LP_CAN1_RX0_IRQHandler+0x16a>
                lcdPage++;
 8001588:	4b27      	ldr	r3, [pc, #156]	; (8001628 <USB_LP_CAN1_RX0_IRQHandler+0x1f0>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	b2da      	uxtb	r2, r3
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <USB_LP_CAN1_RX0_IRQHandler+0x1f0>)
 8001592:	701a      	strb	r2, [r3, #0]
                if (lcdPage == 3) lcdPage = 0;
 8001594:	4b24      	ldr	r3, [pc, #144]	; (8001628 <USB_LP_CAN1_RX0_IRQHandler+0x1f0>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d102      	bne.n	80015a2 <USB_LP_CAN1_RX0_IRQHandler+0x16a>
 800159c:	4b22      	ldr	r3, [pc, #136]	; (8001628 <USB_LP_CAN1_RX0_IRQHandler+0x1f0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
            }
        }
        if (RxHeader->StdId == SEG_BUTTON_ID) {
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <USB_LP_CAN1_RX0_IRQHandler+0x1bc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10f      	bne.n	80015cc <USB_LP_CAN1_RX0_IRQHandler+0x194>
            if (RxData[SEG_BUTTON_BYTE]) {
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00b      	beq.n	80015cc <USB_LP_CAN1_RX0_IRQHandler+0x194>
                speedOrHvPer |= 1;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <USB_LP_CAN1_RX0_IRQHandler+0x1f4>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <USB_LP_CAN1_RX0_IRQHandler+0x1f4>)
 80015c0:	701a      	strb	r2, [r3, #0]
                changeSegTimeStamp = HAL_GetTick();
 80015c2:	f000 fcb7 	bl	8001f34 <HAL_GetTick>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a19      	ldr	r2, [pc, #100]	; (8001630 <USB_LP_CAN1_RX0_IRQHandler+0x1f8>)
 80015ca:	6013      	str	r3, [r2, #0]
            }
        }
          if(RxHeader->StdId == APPS_ID) {
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <USB_LP_CAN1_RX0_IRQHandler+0x1bc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b0a      	cmp	r3, #10
 80015d4:	d106      	bne.n	80015e4 <USB_LP_CAN1_RX0_IRQHandler+0x1ac>
        	  int16_t apps = ((int16_t)RxData[1])<<8;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 80015d8:	785b      	ldrb	r3, [r3, #1]
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	80fb      	strh	r3, [r7, #6]
        	  apps = (int16_t)RxData[0];
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <USB_LP_CAN1_RX0_IRQHandler+0x1c0>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	80fb      	strh	r3, [r7, #6]

        	  }
          }
    }
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <USB_LP_CAN1_RX0_IRQHandler+0x1c4>)
 80015e6:	f001 fa22 	bl	8002a2e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000034c 	.word	0x2000034c
 80015f8:	200002b8 	.word	0x200002b8
 80015fc:	20000168 	.word	0x20000168
 8001600:	20000160 	.word	0x20000160
 8001604:	41200000 	.word	0x41200000
 8001608:	200000a4 	.word	0x200000a4
 800160c:	200000a8 	.word	0x200000a8
 8001610:	200000ac 	.word	0x200000ac
 8001614:	200000b0 	.word	0x200000b0
 8001618:	200000b8 	.word	0x200000b8
 800161c:	200000bc 	.word	0x200000bc
 8001620:	200000c0 	.word	0x200000c0
 8001624:	200000c4 	.word	0x200000c4
 8001628:	200000d0 	.word	0x200000d0
 800162c:	2000020c 	.word	0x2000020c
 8001630:	20000258 	.word	0x20000258

08001634 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	timer2_flag = 1;
 8001638:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <TIM2_IRQHandler+0x3c>)
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
    updateDisplays = 1;
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <TIM2_IRQHandler+0x40>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]

    if (speedOrHvPer) {
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <TIM2_IRQHandler+0x44>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00b      	beq.n	8001664 <TIM2_IRQHandler+0x30>
        if (HAL_GetTick() > changeSegTimeStamp + HV_PERCENTAGE_TIME_MAX) {
 800164c:	f000 fc72 	bl	8001f34 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <TIM2_IRQHandler+0x48>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800165a:	429a      	cmp	r2, r3
 800165c:	d902      	bls.n	8001664 <TIM2_IRQHandler+0x30>
            speedOrHvPer = 0;
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <TIM2_IRQHandler+0x44>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
        }
    }

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001664:	4806      	ldr	r0, [pc, #24]	; (8001680 <TIM2_IRQHandler+0x4c>)
 8001666:	f003 f8bb 	bl	80047e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200000c8 	.word	0x200000c8
 8001674:	20000255 	.word	0x20000255
 8001678:	2000020c 	.word	0x2000020c
 800167c:	20000258 	.word	0x20000258
 8001680:	200002c0 	.word	0x200002c0

08001684 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <USART1_IRQHandler+0x10>)
 800168a:	f003 fc59 	bl	8004f40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000210 	.word	0x20000210

08001698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <_sbrk+0x5c>)
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <_sbrk+0x60>)
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <_sbrk+0x64>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <_sbrk+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d207      	bcs.n	80016d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c8:	f003 ffe8 	bl	800569c <__errno>
 80016cc:	4603      	mov	r3, r0
 80016ce:	220c      	movs	r2, #12
 80016d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
 80016d6:	e009      	b.n	80016ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <_sbrk+0x64>)
 80016e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20005000 	.word	0x20005000
 80016f8:	00000400 	.word	0x00000400
 80016fc:	200000cc 	.word	0x200000cc
 8001700:	200003c0 	.word	0x200003c0

08001704 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <prepareStates>:
};

const uint8_t hvBigLedShift[16] = {23, 22, 21, 20, 19, 18, 17, 16, 31, 30, 29, 28, 27, 26, 25, 24};


uint8_t prepareStates() {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
    // LV Voltage
    if (lvState > LV_VOLTAGE_HIGH) {
 8001716:	4b8d      	ldr	r3, [pc, #564]	; (800194c <prepareStates+0x23c>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b50      	cmp	r3, #80	; 0x50
 800171c:	d912      	bls.n	8001744 <prepareStates+0x34>
        ledArray1 |= (1 << LV_VOLTAGE_LED_3);
 800171e:	4b8c      	ldr	r3, [pc, #560]	; (8001950 <prepareStates+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f043 0308 	orr.w	r3, r3, #8
 8001726:	4a8a      	ldr	r2, [pc, #552]	; (8001950 <prepareStates+0x240>)
 8001728:	6013      	str	r3, [r2, #0]
        ledArray1 |= (1 << LV_VOLTAGE_LED_2);
 800172a:	4b89      	ldr	r3, [pc, #548]	; (8001950 <prepareStates+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	4a87      	ldr	r2, [pc, #540]	; (8001950 <prepareStates+0x240>)
 8001734:	6013      	str	r3, [r2, #0]
        ledArray1 |= (1 << LV_VOLTAGE_LED_1);
 8001736:	4b86      	ldr	r3, [pc, #536]	; (8001950 <prepareStates+0x240>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f043 0302 	orr.w	r3, r3, #2
 800173e:	4a84      	ldr	r2, [pc, #528]	; (8001950 <prepareStates+0x240>)
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e022      	b.n	800178a <prepareStates+0x7a>
    }
    else if (lvState < LV_VOLTAGE_HIGH && lvState >= LV_VOLTAGE_MID) {
 8001744:	4b81      	ldr	r3, [pc, #516]	; (800194c <prepareStates+0x23c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b4f      	cmp	r3, #79	; 0x4f
 800174a:	d810      	bhi.n	800176e <prepareStates+0x5e>
 800174c:	4b7f      	ldr	r3, [pc, #508]	; (800194c <prepareStates+0x23c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b3b      	cmp	r3, #59	; 0x3b
 8001752:	d90c      	bls.n	800176e <prepareStates+0x5e>
        ledArray1 |= (1 << LV_VOLTAGE_LED_2);
 8001754:	4b7e      	ldr	r3, [pc, #504]	; (8001950 <prepareStates+0x240>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	4a7c      	ldr	r2, [pc, #496]	; (8001950 <prepareStates+0x240>)
 800175e:	6013      	str	r3, [r2, #0]
        ledArray1 |= (1 << LV_VOLTAGE_LED_1);
 8001760:	4b7b      	ldr	r3, [pc, #492]	; (8001950 <prepareStates+0x240>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	4a79      	ldr	r2, [pc, #484]	; (8001950 <prepareStates+0x240>)
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	e00d      	b.n	800178a <prepareStates+0x7a>
    }
    else if (lvState < LV_VOLTAGE_MID && lvState >= LV_VOLTAGE_LOW) {
 800176e:	4b77      	ldr	r3, [pc, #476]	; (800194c <prepareStates+0x23c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b3b      	cmp	r3, #59	; 0x3b
 8001774:	d809      	bhi.n	800178a <prepareStates+0x7a>
 8001776:	4b75      	ldr	r3, [pc, #468]	; (800194c <prepareStates+0x23c>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b1d      	cmp	r3, #29
 800177c:	d905      	bls.n	800178a <prepareStates+0x7a>
        ledArray1 |= (1 << LV_VOLTAGE_LED_1);
 800177e:	4b74      	ldr	r3, [pc, #464]	; (8001950 <prepareStates+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f043 0302 	orr.w	r3, r3, #2
 8001786:	4a72      	ldr	r2, [pc, #456]	; (8001950 <prepareStates+0x240>)
 8001788:	6013      	str	r3, [r2, #0]
    else if (lvState < LV_VOLTAGE_ALARM) {
        ;
    }

    // LV Temperature
    if (lvTempAvg < LV_TEMP_HIGH) {
 800178a:	4b72      	ldr	r3, [pc, #456]	; (8001954 <prepareStates+0x244>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4972      	ldr	r1, [pc, #456]	; (8001958 <prepareStates+0x248>)
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe ff87 	bl	80006a4 <__aeabi_fcmplt>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d012      	beq.n	80017c2 <prepareStates+0xb2>
        ledArray1 |= (1 << LV_TEMP_LED_3);
 800179c:	4b6c      	ldr	r3, [pc, #432]	; (8001950 <prepareStates+0x240>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a4:	4a6a      	ldr	r2, [pc, #424]	; (8001950 <prepareStates+0x240>)
 80017a6:	6013      	str	r3, [r2, #0]
        ledArray1 |= (1 << LV_TEMP_LED_2);
 80017a8:	4b69      	ldr	r3, [pc, #420]	; (8001950 <prepareStates+0x240>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f043 0320 	orr.w	r3, r3, #32
 80017b0:	4a67      	ldr	r2, [pc, #412]	; (8001950 <prepareStates+0x240>)
 80017b2:	6013      	str	r3, [r2, #0]
        ledArray1 |= (1 << LV_TEMP_LED_1);
 80017b4:	4b66      	ldr	r3, [pc, #408]	; (8001950 <prepareStates+0x240>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f043 0310 	orr.w	r3, r3, #16
 80017bc:	4a64      	ldr	r2, [pc, #400]	; (8001950 <prepareStates+0x240>)
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e036      	b.n	8001830 <prepareStates+0x120>
    }
    else if (lvTempAvg > LV_TEMP_HIGH && lvTempAvg <= LV_TEMP_MID) {
 80017c2:	4b64      	ldr	r3, [pc, #400]	; (8001954 <prepareStates+0x244>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4964      	ldr	r1, [pc, #400]	; (8001958 <prepareStates+0x248>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe ff89 	bl	80006e0 <__aeabi_fcmpgt>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d015      	beq.n	8001800 <prepareStates+0xf0>
 80017d4:	4b5f      	ldr	r3, [pc, #380]	; (8001954 <prepareStates+0x244>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4960      	ldr	r1, [pc, #384]	; (800195c <prepareStates+0x24c>)
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe ff6c 	bl	80006b8 <__aeabi_fcmple>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00c      	beq.n	8001800 <prepareStates+0xf0>
        ledArray1 |= (1 << LV_TEMP_LED_2);
 80017e6:	4b5a      	ldr	r3, [pc, #360]	; (8001950 <prepareStates+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f043 0320 	orr.w	r3, r3, #32
 80017ee:	4a58      	ldr	r2, [pc, #352]	; (8001950 <prepareStates+0x240>)
 80017f0:	6013      	str	r3, [r2, #0]
        ledArray1 |= (1 << LV_TEMP_LED_1);
 80017f2:	4b57      	ldr	r3, [pc, #348]	; (8001950 <prepareStates+0x240>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f043 0310 	orr.w	r3, r3, #16
 80017fa:	4a55      	ldr	r2, [pc, #340]	; (8001950 <prepareStates+0x240>)
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e017      	b.n	8001830 <prepareStates+0x120>
    }
    else if (lvTempAvg > LV_TEMP_MID && lvTempAvg <= LV_TEMP_LOW) {
 8001800:	4b54      	ldr	r3, [pc, #336]	; (8001954 <prepareStates+0x244>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4955      	ldr	r1, [pc, #340]	; (800195c <prepareStates+0x24c>)
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe ff6a 	bl	80006e0 <__aeabi_fcmpgt>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00e      	beq.n	8001830 <prepareStates+0x120>
 8001812:	4b50      	ldr	r3, [pc, #320]	; (8001954 <prepareStates+0x244>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4952      	ldr	r1, [pc, #328]	; (8001960 <prepareStates+0x250>)
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe ff4d 	bl	80006b8 <__aeabi_fcmple>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <prepareStates+0x120>
        ledArray1 |= (1 << LV_TEMP_LED_1);
 8001824:	4b4a      	ldr	r3, [pc, #296]	; (8001950 <prepareStates+0x240>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f043 0310 	orr.w	r3, r3, #16
 800182c:	4a48      	ldr	r2, [pc, #288]	; (8001950 <prepareStates+0x240>)
 800182e:	6013      	str	r3, [r2, #0]
    else if (lvTempAvg > LV_TEMP_ALARM) {
        ;
    }

    // HV Temperature
    if (hvTempAvg < HV_TEMP_HIGH) {
 8001830:	4b4c      	ldr	r3, [pc, #304]	; (8001964 <prepareStates+0x254>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4948      	ldr	r1, [pc, #288]	; (8001958 <prepareStates+0x248>)
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe ff34 	bl	80006a4 <__aeabi_fcmplt>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d012      	beq.n	8001868 <prepareStates+0x158>
        ledArray1 |= (1 << HV_TEMP_LED_3);
 8001842:	4b43      	ldr	r3, [pc, #268]	; (8001950 <prepareStates+0x240>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800184a:	4a41      	ldr	r2, [pc, #260]	; (8001950 <prepareStates+0x240>)
 800184c:	6013      	str	r3, [r2, #0]
        ledArray1 |= (1 << HV_TEMP_LED_2);
 800184e:	4b40      	ldr	r3, [pc, #256]	; (8001950 <prepareStates+0x240>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001856:	4a3e      	ldr	r2, [pc, #248]	; (8001950 <prepareStates+0x240>)
 8001858:	6013      	str	r3, [r2, #0]
        ledArray1 |= (1 << HV_TEMP_LED_1);
 800185a:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <prepareStates+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001862:	4a3b      	ldr	r2, [pc, #236]	; (8001950 <prepareStates+0x240>)
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	e036      	b.n	80018d6 <prepareStates+0x1c6>
    }
    else if (hvTempAvg > HV_TEMP_HIGH && hvTempAvg <= HV_TEMP_MID) {
 8001868:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <prepareStates+0x254>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	493a      	ldr	r1, [pc, #232]	; (8001958 <prepareStates+0x248>)
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe ff36 	bl	80006e0 <__aeabi_fcmpgt>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d015      	beq.n	80018a6 <prepareStates+0x196>
 800187a:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <prepareStates+0x254>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4937      	ldr	r1, [pc, #220]	; (800195c <prepareStates+0x24c>)
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe ff19 	bl	80006b8 <__aeabi_fcmple>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00c      	beq.n	80018a6 <prepareStates+0x196>
        ledArray1 |= (1 << HV_TEMP_LED_2);
 800188c:	4b30      	ldr	r3, [pc, #192]	; (8001950 <prepareStates+0x240>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001894:	4a2e      	ldr	r2, [pc, #184]	; (8001950 <prepareStates+0x240>)
 8001896:	6013      	str	r3, [r2, #0]
        ledArray1 |= (1 << HV_TEMP_LED_1);
 8001898:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <prepareStates+0x240>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018a0:	4a2b      	ldr	r2, [pc, #172]	; (8001950 <prepareStates+0x240>)
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	e017      	b.n	80018d6 <prepareStates+0x1c6>
    }
    else if (hvTempAvg > HV_TEMP_MID && hvTempAvg <= HV_TEMP_LOW) {
 80018a6:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <prepareStates+0x254>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	492c      	ldr	r1, [pc, #176]	; (800195c <prepareStates+0x24c>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe ff17 	bl	80006e0 <__aeabi_fcmpgt>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00e      	beq.n	80018d6 <prepareStates+0x1c6>
 80018b8:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <prepareStates+0x254>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4928      	ldr	r1, [pc, #160]	; (8001960 <prepareStates+0x250>)
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fefa 	bl	80006b8 <__aeabi_fcmple>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <prepareStates+0x1c6>
        ledArray1 |= (1 << HV_TEMP_LED_1);
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <prepareStates+0x240>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d2:	4a1f      	ldr	r2, [pc, #124]	; (8001950 <prepareStates+0x240>)
 80018d4:	6013      	str	r3, [r2, #0]
    else if (hvTempAvg > HV_TEMP_ALARM) {
        ;
    }

    // Water Temperature 1
    if (waterTemp1 < WATER_T_1_HIGH) {
 80018d6:	4b24      	ldr	r3, [pc, #144]	; (8001968 <prepareStates+0x258>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4924      	ldr	r1, [pc, #144]	; (800196c <prepareStates+0x25c>)
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fee1 	bl	80006a4 <__aeabi_fcmplt>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d012      	beq.n	800190e <prepareStates+0x1fe>
        ledArray1 |= (1 << WATER_T_1_LED_3);
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <prepareStates+0x240>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	4a17      	ldr	r2, [pc, #92]	; (8001950 <prepareStates+0x240>)
 80018f2:	6013      	str	r3, [r2, #0]
        ledArray1 |= (1 << WATER_T_1_LED_2);
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <prepareStates+0x240>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018fc:	4a14      	ldr	r2, [pc, #80]	; (8001950 <prepareStates+0x240>)
 80018fe:	6013      	str	r3, [r2, #0]
        ledArray1 |= (1 << WATER_T_1_LED_1);
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <prepareStates+0x240>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	4a11      	ldr	r2, [pc, #68]	; (8001950 <prepareStates+0x240>)
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	e04a      	b.n	80019a4 <prepareStates+0x294>
    }
    else if (waterTemp1 > WATER_T_1_HIGH && waterTemp1 <= WATER_T_1_MID) {
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <prepareStates+0x258>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4916      	ldr	r1, [pc, #88]	; (800196c <prepareStates+0x25c>)
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fee3 	bl	80006e0 <__aeabi_fcmpgt>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d029      	beq.n	8001974 <prepareStates+0x264>
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <prepareStates+0x258>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4912      	ldr	r1, [pc, #72]	; (8001970 <prepareStates+0x260>)
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fec6 	bl	80006b8 <__aeabi_fcmple>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d020      	beq.n	8001974 <prepareStates+0x264>
        ledArray1 |= (1 << WATER_T_1_LED_2);
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <prepareStates+0x240>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <prepareStates+0x240>)
 800193c:	6013      	str	r3, [r2, #0]
        ledArray1 |= (1 << WATER_T_1_LED_1);
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <prepareStates+0x240>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001946:	4a02      	ldr	r2, [pc, #8]	; (8001950 <prepareStates+0x240>)
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e02b      	b.n	80019a4 <prepareStates+0x294>
 800194c:	200000ac 	.word	0x200000ac
 8001950:	20000208 	.word	0x20000208
 8001954:	200000a8 	.word	0x200000a8
 8001958:	420c0000 	.word	0x420c0000
 800195c:	42340000 	.word	0x42340000
 8001960:	425c0000 	.word	0x425c0000
 8001964:	200000b4 	.word	0x200000b4
 8001968:	200000c0 	.word	0x200000c0
 800196c:	42200000 	.word	0x42200000
 8001970:	42700000 	.word	0x42700000
    }
    else if (waterTemp1 > WATER_T_1_MID && waterTemp1 <= WATER_T_1_LOW) {
 8001974:	4b54      	ldr	r3, [pc, #336]	; (8001ac8 <prepareStates+0x3b8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4954      	ldr	r1, [pc, #336]	; (8001acc <prepareStates+0x3bc>)
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe feb0 	bl	80006e0 <__aeabi_fcmpgt>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00e      	beq.n	80019a4 <prepareStates+0x294>
 8001986:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <prepareStates+0x3b8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4951      	ldr	r1, [pc, #324]	; (8001ad0 <prepareStates+0x3c0>)
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fe93 	bl	80006b8 <__aeabi_fcmple>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <prepareStates+0x294>
        ledArray1 |= (1 << WATER_T_1_LED_1);
 8001998:	4b4e      	ldr	r3, [pc, #312]	; (8001ad4 <prepareStates+0x3c4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a0:	4a4c      	ldr	r2, [pc, #304]	; (8001ad4 <prepareStates+0x3c4>)
 80019a2:	6013      	str	r3, [r2, #0]
    else if (waterTemp1 > WATER_T_1_ALARM) {
        ;
    }

    // Water Temperature 2
    if (waterTemp2 < WATER_T_2_HIGH) {
 80019a4:	4b4c      	ldr	r3, [pc, #304]	; (8001ad8 <prepareStates+0x3c8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	494c      	ldr	r1, [pc, #304]	; (8001adc <prepareStates+0x3cc>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fe7a 	bl	80006a4 <__aeabi_fcmplt>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d014      	beq.n	80019e0 <prepareStates+0x2d0>
        ledArray2 |= (1 << WATER_T_2_LED_3);
 80019b6:	4b4a      	ldr	r3, [pc, #296]	; (8001ae0 <prepareStates+0x3d0>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	f043 0302 	orr.w	r3, r3, #2
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	4b47      	ldr	r3, [pc, #284]	; (8001ae0 <prepareStates+0x3d0>)
 80019c2:	701a      	strb	r2, [r3, #0]
        ledArray2 |= (1 << WATER_T_2_LED_2);
 80019c4:	4b46      	ldr	r3, [pc, #280]	; (8001ae0 <prepareStates+0x3d0>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4b44      	ldr	r3, [pc, #272]	; (8001ae0 <prepareStates+0x3d0>)
 80019d0:	701a      	strb	r2, [r3, #0]
        ledArray1 |= (1 << WATER_T_2_LED_1);
 80019d2:	4b40      	ldr	r3, [pc, #256]	; (8001ad4 <prepareStates+0x3c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019da:	4a3e      	ldr	r2, [pc, #248]	; (8001ad4 <prepareStates+0x3c4>)
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e037      	b.n	8001a50 <prepareStates+0x340>
    }
    else if (waterTemp2 > WATER_T_2_HIGH && waterTemp1 <= WATER_T_2_MID) {
 80019e0:	4b3d      	ldr	r3, [pc, #244]	; (8001ad8 <prepareStates+0x3c8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	493d      	ldr	r1, [pc, #244]	; (8001adc <prepareStates+0x3cc>)
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fe7a 	bl	80006e0 <__aeabi_fcmpgt>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d016      	beq.n	8001a20 <prepareStates+0x310>
 80019f2:	4b35      	ldr	r3, [pc, #212]	; (8001ac8 <prepareStates+0x3b8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4935      	ldr	r1, [pc, #212]	; (8001acc <prepareStates+0x3bc>)
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fe5d 	bl	80006b8 <__aeabi_fcmple>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00d      	beq.n	8001a20 <prepareStates+0x310>
        ledArray2 |= (1 << WATER_T_2_LED_2);
 8001a04:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <prepareStates+0x3d0>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b34      	ldr	r3, [pc, #208]	; (8001ae0 <prepareStates+0x3d0>)
 8001a10:	701a      	strb	r2, [r3, #0]
        ledArray1 |= (1 << WATER_T_2_LED_1);
 8001a12:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <prepareStates+0x3c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a1a:	4a2e      	ldr	r2, [pc, #184]	; (8001ad4 <prepareStates+0x3c4>)
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e017      	b.n	8001a50 <prepareStates+0x340>
    }
    else if (waterTemp2 > WATER_T_2_MID && waterTemp1 <= WATER_T_2_LOW) {
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <prepareStates+0x3c8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4929      	ldr	r1, [pc, #164]	; (8001acc <prepareStates+0x3bc>)
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fe5a 	bl	80006e0 <__aeabi_fcmpgt>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00e      	beq.n	8001a50 <prepareStates+0x340>
 8001a32:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <prepareStates+0x3b8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4926      	ldr	r1, [pc, #152]	; (8001ad0 <prepareStates+0x3c0>)
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fe3d 	bl	80006b8 <__aeabi_fcmple>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <prepareStates+0x340>
        ledArray1 |= (1 << WATER_T_2_LED_1);
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <prepareStates+0x3c4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4c:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <prepareStates+0x3c4>)
 8001a4e:	6013      	str	r3, [r2, #0]
    else if (waterTemp2 > WATER_T_2_ALARM) {
        ;
    }

    // TS State
    if (TSState)
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <prepareStates+0x3d4>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <prepareStates+0x354>
        ledArray1 |= (1 << TS_STATE_LED);
 8001a58:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <prepareStates+0x3c4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a60:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <prepareStates+0x3c4>)
 8001a62:	6013      	str	r3, [r2, #0]

    //HV Voltage big
    uint16_t hvLedTemp = UINT16_MAX;
 8001a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a68:	80fb      	strh	r3, [r7, #6]
    uint8_t hvVolTemp = hvState;
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <prepareStates+0x3d8>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	717b      	strb	r3, [r7, #5]

    while (hvVolTemp <= 100){
 8001a70:	e005      	b.n	8001a7e <prepareStates+0x36e>
        hvVolTemp += 6;
 8001a72:	797b      	ldrb	r3, [r7, #5]
 8001a74:	3306      	adds	r3, #6
 8001a76:	717b      	strb	r3, [r7, #5]
        hvLedTemp >>= 1;
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	085b      	lsrs	r3, r3, #1
 8001a7c:	80fb      	strh	r3, [r7, #6]
    while (hvVolTemp <= 100){
 8001a7e:	797b      	ldrb	r3, [r7, #5]
 8001a80:	2b64      	cmp	r3, #100	; 0x64
 8001a82:	d9f6      	bls.n	8001a72 <prepareStates+0x362>
    }

    for (uint8_t i = 0 ; i < 16 ; i++ ){
 8001a84:	2300      	movs	r3, #0
 8001a86:	713b      	strb	r3, [r7, #4]
 8001a88:	e016      	b.n	8001ab8 <prepareStates+0x3a8>
        if (hvLedTemp >> i & 1){
 8001a8a:	88fa      	ldrh	r2, [r7, #6]
 8001a8c:	793b      	ldrb	r3, [r7, #4]
 8001a8e:	fa42 f303 	asr.w	r3, r2, r3
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00b      	beq.n	8001ab2 <prepareStates+0x3a2>
            ledArray1 |= 1 << hvBigLedShift[i];
 8001a9a:	793b      	ldrb	r3, [r7, #4]
 8001a9c:	4a13      	ldr	r2, [pc, #76]	; (8001aec <prepareStates+0x3dc>)
 8001a9e:	5cd3      	ldrb	r3, [r2, r3]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	4093      	lsls	r3, r2
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <prepareStates+0x3c4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <prepareStates+0x3c4>)
 8001ab0:	6013      	str	r3, [r2, #0]
    for (uint8_t i = 0 ; i < 16 ; i++ ){
 8001ab2:	793b      	ldrb	r3, [r7, #4]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	713b      	strb	r3, [r7, #4]
 8001ab8:	793b      	ldrb	r3, [r7, #4]
 8001aba:	2b0f      	cmp	r3, #15
 8001abc:	d9e5      	bls.n	8001a8a <prepareStates+0x37a>
        }
    }

    return 0;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200000c0 	.word	0x200000c0
 8001acc:	42700000 	.word	0x42700000
 8001ad0:	42b40000 	.word	0x42b40000
 8001ad4:	20000208 	.word	0x20000208
 8001ad8:	200000c4 	.word	0x200000c4
 8001adc:	42200000 	.word	0x42200000
 8001ae0:	20000254 	.word	0x20000254
 8001ae4:	20000104 	.word	0x20000104
 8001ae8:	200000bc 	.word	0x200000bc
 8001aec:	0800606c 	.word	0x0800606c

08001af0 <sendLed>:

uint8_t sendLed() {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
    uint8_t status = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	71fb      	strb	r3, [r7, #7]
    prepareStates();
 8001afa:	f7ff fe09 	bl	8001710 <prepareStates>
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b04:	4811      	ldr	r0, [pc, #68]	; (8001b4c <sendLed+0x5c>)
 8001b06:	f001 fe61 	bl	80037cc <HAL_GPIO_WritePin>
    status |= HAL_SPI_Transmit(&hspi2, (uint8_t *)(&ledArray2), 1, 100);
 8001b0a:	2364      	movs	r3, #100	; 0x64
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4910      	ldr	r1, [pc, #64]	; (8001b50 <sendLed+0x60>)
 8001b10:	4810      	ldr	r0, [pc, #64]	; (8001b54 <sendLed+0x64>)
 8001b12:	f002 fbe1 	bl	80042d8 <HAL_SPI_Transmit>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	71fb      	strb	r3, [r7, #7]
    status |= HAL_SPI_Transmit(&hspi2, (uint8_t *)(&ledArray1), 4, 100);
 8001b20:	2364      	movs	r3, #100	; 0x64
 8001b22:	2204      	movs	r2, #4
 8001b24:	490c      	ldr	r1, [pc, #48]	; (8001b58 <sendLed+0x68>)
 8001b26:	480b      	ldr	r0, [pc, #44]	; (8001b54 <sendLed+0x64>)
 8001b28:	f002 fbd6 	bl	80042d8 <HAL_SPI_Transmit>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, 1);
 8001b36:	2201      	movs	r2, #1
 8001b38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <sendLed+0x5c>)
 8001b3e:	f001 fe45 	bl	80037cc <HAL_GPIO_WritePin>

    return status;
 8001b42:	79fb      	ldrb	r3, [r7, #7]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40010c00 	.word	0x40010c00
 8001b50:	20000254 	.word	0x20000254
 8001b54:	20000108 	.word	0x20000108
 8001b58:	20000208 	.word	0x20000208

08001b5c <hvVoltageToPercent>:

uint8_t hvVoltageToPercent() {
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
    return (uint8_t) hvState;
 8001b60:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <hvVoltageToPercent+0x10>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	200000bc 	.word	0x200000bc

08001b70 <prepareSegDisplay>:

uint8_t prepareSegDisplay() {
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
    if (1) {
        // HV %
        uint8_t hvVoltagePer = 25;
 8001b76:	2319      	movs	r3, #25
 8001b78:	71fb      	strb	r3, [r7, #7]
        segDisplayArray = (digits[10] << 16) | ((digits[(hvVoltagePer % 100) / 10]) << 8) | digits[hvVoltagePer % 10];
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	041a      	lsls	r2, r3, #16
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	4915      	ldr	r1, [pc, #84]	; (8001bd8 <prepareSegDisplay+0x68>)
 8001b82:	fba1 0103 	umull	r0, r1, r1, r3
 8001b86:	0949      	lsrs	r1, r1, #5
 8001b88:	2064      	movs	r0, #100	; 0x64
 8001b8a:	fb00 f101 	mul.w	r1, r0, r1
 8001b8e:	1a5b      	subs	r3, r3, r1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	4912      	ldr	r1, [pc, #72]	; (8001bdc <prepareSegDisplay+0x6c>)
 8001b94:	fba1 1303 	umull	r1, r3, r1, r3
 8001b98:	08db      	lsrs	r3, r3, #3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <prepareSegDisplay+0x70>)
 8001ba0:	5c5b      	ldrb	r3, [r3, r1]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	ea42 0003 	orr.w	r0, r2, r3
 8001ba8:	79fa      	ldrb	r2, [r7, #7]
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <prepareSegDisplay+0x6c>)
 8001bac:	fba3 1302 	umull	r1, r3, r3, r2
 8001bb0:	08d9      	lsrs	r1, r3, #3
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <prepareSegDisplay+0x70>)
 8001bc2:	5c9b      	ldrb	r3, [r3, r2]
 8001bc4:	4303      	orrs	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <prepareSegDisplay+0x74>)
 8001bca:	601a      	str	r2, [r3, #0]
    else {
        // Speed
        segDisplayArray = ((digits[carSpeed / 100]) << 16) | ((digits[carSpeed % 100 / 10]) << 8) | digits[carSpeed % 10];
    }

    return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	51eb851f 	.word	0x51eb851f
 8001bdc:	cccccccd 	.word	0xcccccccd
 8001be0:	08006060 	.word	0x08006060
 8001be4:	20000164 	.word	0x20000164

08001be8 <send7Seg>:

uint8_t send7Seg() {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
    uint8_t status = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	71fb      	strb	r3, [r7, #7]
    prepareSegDisplay();
 8001bf2:	f7ff ffbd 	bl	8001b70 <prepareSegDisplay>
    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2110      	movs	r1, #16
 8001bfa:	480c      	ldr	r0, [pc, #48]	; (8001c2c <send7Seg+0x44>)
 8001bfc:	f001 fde6 	bl	80037cc <HAL_GPIO_WritePin>
    status |= HAL_SPI_Transmit(&hspi1, (uint8_t*) (&segDisplayArray), 3, 10);
 8001c00:	230a      	movs	r3, #10
 8001c02:	2203      	movs	r2, #3
 8001c04:	490a      	ldr	r1, [pc, #40]	; (8001c30 <send7Seg+0x48>)
 8001c06:	480b      	ldr	r0, [pc, #44]	; (8001c34 <send7Seg+0x4c>)
 8001c08:	f002 fb66 	bl	80042d8 <HAL_SPI_Transmit>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	461a      	mov	r2, r3
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 1);
 8001c16:	2201      	movs	r2, #1
 8001c18:	2110      	movs	r1, #16
 8001c1a:	4804      	ldr	r0, [pc, #16]	; (8001c2c <send7Seg+0x44>)
 8001c1c:	f001 fdd6 	bl	80037cc <HAL_GPIO_WritePin>

    return status;
 8001c20:	79fb      	ldrb	r3, [r7, #7]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40010800 	.word	0x40010800
 8001c30:	20000164 	.word	0x20000164
 8001c34:	20000260 	.word	0x20000260

08001c38 <sendAlfaNum>:

uint8_t sendAlfaNum() {
 8001c38:	b5b0      	push	{r4, r5, r7, lr}
 8001c3a:	b08e      	sub	sp, #56	; 0x38
 8001c3c:	af02      	add	r7, sp, #8
    lcdClear();
 8001c3e:	f7fe fdbf 	bl	80007c0 <lcdClear>
    if (lcdPage == 0) {
 8001c42:	4b73      	ldr	r3, [pc, #460]	; (8001e10 <sendAlfaNum+0x1d8>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d148      	bne.n	8001cdc <sendAlfaNum+0xa4>
        char temp[16] = {};
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
 8001c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
        snprintf(temp, 16, lcdStringRow0Up, (uint8_t) hvVoltageToPercent(), (uint8_t) waterTemp1);
 8001c5a:	4b6e      	ldr	r3, [pc, #440]	; (8001e14 <sendAlfaNum+0x1dc>)
 8001c5c:	681c      	ldr	r4, [r3, #0]
 8001c5e:	f7ff ff7d 	bl	8001b5c <hvVoltageToPercent>
 8001c62:	4603      	mov	r3, r0
 8001c64:	461d      	mov	r5, r3
 8001c66:	4b6c      	ldr	r3, [pc, #432]	; (8001e18 <sendAlfaNum+0x1e0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fd42 	bl	80006f4 <__aeabi_f2uiz>
 8001c70:	4603      	mov	r3, r0
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f107 0020 	add.w	r0, r7, #32
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	462b      	mov	r3, r5
 8001c7c:	4622      	mov	r2, r4
 8001c7e:	2110      	movs	r1, #16
 8001c80:	f003 fd3e 	bl	8005700 <sniprintf>
        lcdMoveCursor(0, 0);
 8001c84:	2100      	movs	r1, #0
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7fe fd80 	bl	800078c <lcdMoveCursor>
        lcdWriteString(temp);
 8001c8c:	f107 0320 	add.w	r3, r7, #32
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fd65 	bl	8000760 <lcdWriteString>

        snprintf(temp, 16, lcdStringRow0Low, (uint8_t) lvVoltage, (uint8_t) waterTemp2);
 8001c96:	4b61      	ldr	r3, [pc, #388]	; (8001e1c <sendAlfaNum+0x1e4>)
 8001c98:	681c      	ldr	r4, [r3, #0]
 8001c9a:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <sendAlfaNum+0x1e8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fd28 	bl	80006f4 <__aeabi_f2uiz>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461d      	mov	r5, r3
 8001caa:	4b5e      	ldr	r3, [pc, #376]	; (8001e24 <sendAlfaNum+0x1ec>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fd20 	bl	80006f4 <__aeabi_f2uiz>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f107 0020 	add.w	r0, r7, #32
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	462b      	mov	r3, r5
 8001cc0:	4622      	mov	r2, r4
 8001cc2:	2110      	movs	r1, #16
 8001cc4:	f003 fd1c 	bl	8005700 <sniprintf>
        lcdMoveCursor(1, 0);
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f7fe fd5e 	bl	800078c <lcdMoveCursor>
        lcdWriteString(temp);
 8001cd0:	f107 0320 	add.w	r3, r7, #32
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fd43 	bl	8000760 <lcdWriteString>
 8001cda:	e093      	b.n	8001e04 <sendAlfaNum+0x1cc>
    }
    else if (lcdPage == 1) {
 8001cdc:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <sendAlfaNum+0x1d8>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d148      	bne.n	8001d76 <sendAlfaNum+0x13e>
        char temp[16] = {};
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
        snprintf(temp, 16, lcdStringRow1Up, (uint8_t) hvVoltageToPercent(), (uint8_t) waterTemp1);
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <sendAlfaNum+0x1f0>)
 8001cf6:	681c      	ldr	r4, [r3, #0]
 8001cf8:	f7ff ff30 	bl	8001b5c <hvVoltageToPercent>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461d      	mov	r5, r3
 8001d00:	4b45      	ldr	r3, [pc, #276]	; (8001e18 <sendAlfaNum+0x1e0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fcf5 	bl	80006f4 <__aeabi_f2uiz>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f107 0010 	add.w	r0, r7, #16
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	462b      	mov	r3, r5
 8001d16:	4622      	mov	r2, r4
 8001d18:	2110      	movs	r1, #16
 8001d1a:	f003 fcf1 	bl	8005700 <sniprintf>
        lcdMoveCursor(0, 0);
 8001d1e:	2100      	movs	r1, #0
 8001d20:	2000      	movs	r0, #0
 8001d22:	f7fe fd33 	bl	800078c <lcdMoveCursor>
        lcdWriteString(temp);
 8001d26:	f107 0310 	add.w	r3, r7, #16
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fd18 	bl	8000760 <lcdWriteString>

        snprintf(temp, 16, lcdStringRow1Low, (uint8_t) lvVoltage, (uint8_t) waterTemp2);
 8001d30:	4b3e      	ldr	r3, [pc, #248]	; (8001e2c <sendAlfaNum+0x1f4>)
 8001d32:	681c      	ldr	r4, [r3, #0]
 8001d34:	4b3a      	ldr	r3, [pc, #232]	; (8001e20 <sendAlfaNum+0x1e8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fcdb 	bl	80006f4 <__aeabi_f2uiz>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	461d      	mov	r5, r3
 8001d44:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <sendAlfaNum+0x1ec>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fcd3 	bl	80006f4 <__aeabi_f2uiz>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f107 0010 	add.w	r0, r7, #16
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	462b      	mov	r3, r5
 8001d5a:	4622      	mov	r2, r4
 8001d5c:	2110      	movs	r1, #16
 8001d5e:	f003 fccf 	bl	8005700 <sniprintf>
        lcdMoveCursor(1, 0);
 8001d62:	2100      	movs	r1, #0
 8001d64:	2001      	movs	r0, #1
 8001d66:	f7fe fd11 	bl	800078c <lcdMoveCursor>
        lcdWriteString(temp);
 8001d6a:	f107 0310 	add.w	r3, r7, #16
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fcf6 	bl	8000760 <lcdWriteString>
 8001d74:	e046      	b.n	8001e04 <sendAlfaNum+0x1cc>
    }
    else if (lcdPage == 2) {
 8001d76:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <sendAlfaNum+0x1d8>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d142      	bne.n	8001e04 <sendAlfaNum+0x1cc>
        char temp[16] = {};
 8001d7e:	2300      	movs	r3, #0
 8001d80:	603b      	str	r3, [r7, #0]
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
        snprintf(temp, 16, lcdStringRow2Up, (uint8_t) hvVoltageToPercent(), (uint8_t) waterTemp1);
 8001d8c:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <sendAlfaNum+0x1f8>)
 8001d8e:	681c      	ldr	r4, [r3, #0]
 8001d90:	f7ff fee4 	bl	8001b5c <hvVoltageToPercent>
 8001d94:	4603      	mov	r3, r0
 8001d96:	461d      	mov	r5, r3
 8001d98:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <sendAlfaNum+0x1e0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fca9 	bl	80006f4 <__aeabi_f2uiz>
 8001da2:	4603      	mov	r3, r0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	4638      	mov	r0, r7
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	462b      	mov	r3, r5
 8001dac:	4622      	mov	r2, r4
 8001dae:	2110      	movs	r1, #16
 8001db0:	f003 fca6 	bl	8005700 <sniprintf>
        lcdMoveCursor(0, 0);
 8001db4:	2100      	movs	r1, #0
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7fe fce8 	bl	800078c <lcdMoveCursor>
        lcdWriteString(temp);
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fcce 	bl	8000760 <lcdWriteString>

        snprintf(temp, 16, lcdStringRow2Low, (uint8_t) lvVoltage, (uint8_t) waterTemp2);
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <sendAlfaNum+0x1fc>)
 8001dc6:	681c      	ldr	r4, [r3, #0]
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <sendAlfaNum+0x1e8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fc91 	bl	80006f4 <__aeabi_f2uiz>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461d      	mov	r5, r3
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <sendAlfaNum+0x1ec>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fc89 	bl	80006f4 <__aeabi_f2uiz>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	4638      	mov	r0, r7
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	462b      	mov	r3, r5
 8001dec:	4622      	mov	r2, r4
 8001dee:	2110      	movs	r1, #16
 8001df0:	f003 fc86 	bl	8005700 <sniprintf>
        lcdMoveCursor(1, 0);
 8001df4:	2100      	movs	r1, #0
 8001df6:	2001      	movs	r0, #1
 8001df8:	f7fe fcc8 	bl	800078c <lcdMoveCursor>
        lcdWriteString(temp);
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fcae 	bl	8000760 <lcdWriteString>
    }
    return 0;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3730      	adds	r7, #48	; 0x30
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200000d0 	.word	0x200000d0
 8001e14:	20000004 	.word	0x20000004
 8001e18:	200000c0 	.word	0x200000c0
 8001e1c:	20000008 	.word	0x20000008
 8001e20:	200000a4 	.word	0x200000a4
 8001e24:	200000c4 	.word	0x200000c4
 8001e28:	2000000c 	.word	0x2000000c
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	20000014 	.word	0x20000014
 8001e34:	20000018 	.word	0x20000018

08001e38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e38:	480c      	ldr	r0, [pc, #48]	; (8001e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e3a:	490d      	ldr	r1, [pc, #52]	; (8001e70 <LoopFillZerobss+0x16>)
 	  ldr r2, =_sidata
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e40:	e002      	b.n	8001e48 <LoopCopyDataInit>

08001e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e46:	3304      	adds	r3, #4

08001e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e4c:	d3f9      	bcc.n	8001e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e50:	4c0a      	ldr	r4, [pc, #40]	; (8001e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e54:	e001      	b.n	8001e5a <LoopFillZerobss>

08001e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e58:	3204      	adds	r2, #4

08001e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e5c:	d3fb      	bcc.n	8001e56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e5e:	f7ff fc51 	bl	8001704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e62:	f003 fc21 	bl	80056a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e66:	f7fe fd31 	bl	80008cc <main>
  bx lr
 8001e6a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e70:	20000088 	.word	0x20000088
 	  ldr r2, =_sidata
 8001e74:	080060b8 	.word	0x080060b8
  ldr r2, =_sbss
 8001e78:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001e7c:	200003c0 	.word	0x200003c0

08001e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e80:	e7fe      	b.n	8001e80 <ADC1_2_IRQHandler>
	...

08001e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_Init+0x28>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a07      	ldr	r2, [pc, #28]	; (8001eac <HAL_Init+0x28>)
 8001e8e:	f043 0310 	orr.w	r3, r3, #16
 8001e92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e94:	2003      	movs	r0, #3
 8001e96:	f001 f8c3 	bl	8003020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f000 f808 	bl	8001eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea0:	f7ff f850 	bl	8000f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40022000 	.word	0x40022000

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_InitTick+0x54>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_InitTick+0x58>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f001 f8db 	bl	800308a <HAL_SYSTICK_Config>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00e      	b.n	8001efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b0f      	cmp	r3, #15
 8001ee2:	d80a      	bhi.n	8001efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f001 f8a3 	bl	8003036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef0:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <HAL_InitTick+0x5c>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e000      	b.n	8001efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000020 	.word	0x20000020
 8001f0c:	2000001c 	.word	0x2000001c

08001f10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_IncTick+0x1c>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_IncTick+0x20>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a03      	ldr	r2, [pc, #12]	; (8001f30 <HAL_IncTick+0x20>)
 8001f22:	6013      	str	r3, [r2, #0]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	20000020 	.word	0x20000020
 8001f30:	200003ac 	.word	0x200003ac

08001f34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return uwTick;
 8001f38:	4b02      	ldr	r3, [pc, #8]	; (8001f44 <HAL_GetTick+0x10>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	200003ac 	.word	0x200003ac

08001f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f50:	f7ff fff0 	bl	8001f34 <HAL_GetTick>
 8001f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f60:	d005      	beq.n	8001f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_Delay+0x44>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f6e:	bf00      	nop
 8001f70:	f7ff ffe0 	bl	8001f34 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d8f7      	bhi.n	8001f70 <HAL_Delay+0x28>
  {
  }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000020 	.word	0x20000020

08001f90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0be      	b.n	8002130 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d109      	bne.n	8001fd4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe ffea 	bl	8000fa8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f9ab 	bl	8002330 <ADC_ConversionStop_Disable>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f040 8099 	bne.w	800211e <HAL_ADC_Init+0x18e>
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f040 8095 	bne.w	800211e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ffc:	f023 0302 	bic.w	r3, r3, #2
 8002000:	f043 0202 	orr.w	r2, r3, #2
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002010:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7b1b      	ldrb	r3, [r3, #12]
 8002016:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002018:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	4313      	orrs	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002028:	d003      	beq.n	8002032 <HAL_ADC_Init+0xa2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d102      	bne.n	8002038 <HAL_ADC_Init+0xa8>
 8002032:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002036:	e000      	b.n	800203a <HAL_ADC_Init+0xaa>
 8002038:	2300      	movs	r3, #0
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7d1b      	ldrb	r3, [r3, #20]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d119      	bne.n	800207c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7b1b      	ldrb	r3, [r3, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d109      	bne.n	8002064 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	3b01      	subs	r3, #1
 8002056:	035a      	lsls	r2, r3, #13
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	e00b      	b.n	800207c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	f043 0220 	orr.w	r2, r3, #32
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	f043 0201 	orr.w	r2, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	430a      	orrs	r2, r1
 800208e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	4b28      	ldr	r3, [pc, #160]	; (8002138 <HAL_ADC_Init+0x1a8>)
 8002098:	4013      	ands	r3, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	68b9      	ldr	r1, [r7, #8]
 80020a0:	430b      	orrs	r3, r1
 80020a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ac:	d003      	beq.n	80020b6 <HAL_ADC_Init+0x126>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d104      	bne.n	80020c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	051b      	lsls	r3, r3, #20
 80020be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_ADC_Init+0x1ac>)
 80020dc:	4013      	ands	r3, r2
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d10b      	bne.n	80020fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	f023 0303 	bic.w	r3, r3, #3
 80020f2:	f043 0201 	orr.w	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020fa:	e018      	b.n	800212e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	f023 0312 	bic.w	r3, r3, #18
 8002104:	f043 0210 	orr.w	r2, r3, #16
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	f043 0201 	orr.w	r2, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800211c:	e007      	b.n	800212e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	f043 0210 	orr.w	r2, r3, #16
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800212e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	ffe1f7fd 	.word	0xffe1f7fd
 800213c:	ff1f0efe 	.word	0xff1f0efe

08002140 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x20>
 800215c:	2302      	movs	r3, #2
 800215e:	e0dc      	b.n	800231a <HAL_ADC_ConfigChannel+0x1da>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b06      	cmp	r3, #6
 800216e:	d81c      	bhi.n	80021aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	3b05      	subs	r3, #5
 8002182:	221f      	movs	r2, #31
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	4019      	ands	r1, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	3b05      	subs	r3, #5
 800219c:	fa00 f203 	lsl.w	r2, r0, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	635a      	str	r2, [r3, #52]	; 0x34
 80021a8:	e03c      	b.n	8002224 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d81c      	bhi.n	80021ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	3b23      	subs	r3, #35	; 0x23
 80021c4:	221f      	movs	r2, #31
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	4019      	ands	r1, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	3b23      	subs	r3, #35	; 0x23
 80021de:	fa00 f203 	lsl.w	r2, r0, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
 80021ea:	e01b      	b.n	8002224 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	3b41      	subs	r3, #65	; 0x41
 80021fe:	221f      	movs	r2, #31
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	4019      	ands	r1, r3
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	3b41      	subs	r3, #65	; 0x41
 8002218:	fa00 f203 	lsl.w	r2, r0, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b09      	cmp	r3, #9
 800222a:	d91c      	bls.n	8002266 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68d9      	ldr	r1, [r3, #12]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	3b1e      	subs	r3, #30
 800223e:	2207      	movs	r2, #7
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	4019      	ands	r1, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	6898      	ldr	r0, [r3, #8]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	3b1e      	subs	r3, #30
 8002258:	fa00 f203 	lsl.w	r2, r0, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	60da      	str	r2, [r3, #12]
 8002264:	e019      	b.n	800229a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6919      	ldr	r1, [r3, #16]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4613      	mov	r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4413      	add	r3, r2
 8002276:	2207      	movs	r2, #7
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	4019      	ands	r1, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6898      	ldr	r0, [r3, #8]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	fa00 f203 	lsl.w	r2, r0, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b10      	cmp	r3, #16
 80022a0:	d003      	beq.n	80022aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022a6:	2b11      	cmp	r3, #17
 80022a8:	d132      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <HAL_ADC_ConfigChannel+0x1e4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d125      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d126      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022d0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b10      	cmp	r3, #16
 80022d8:	d11a      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022da:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_ADC_ConfigChannel+0x1e8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a13      	ldr	r2, [pc, #76]	; (800232c <HAL_ADC_ConfigChannel+0x1ec>)
 80022e0:	fba2 2303 	umull	r2, r3, r2, r3
 80022e4:	0c9a      	lsrs	r2, r3, #18
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022f0:	e002      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f9      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x1b2>
 80022fe:	e007      	b.n	8002310 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	f043 0220 	orr.w	r2, r3, #32
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002318:	7bfb      	ldrb	r3, [r7, #15]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	40012400 	.word	0x40012400
 8002328:	20000000 	.word	0x20000000
 800232c:	431bde83 	.word	0x431bde83

08002330 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b01      	cmp	r3, #1
 8002348:	d12e      	bne.n	80023a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0201 	bic.w	r2, r2, #1
 8002358:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800235a:	f7ff fdeb 	bl	8001f34 <HAL_GetTick>
 800235e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002360:	e01b      	b.n	800239a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002362:	f7ff fde7 	bl	8001f34 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d914      	bls.n	800239a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d10d      	bne.n	800239a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	f043 0210 	orr.w	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	f043 0201 	orr.w	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e007      	b.n	80023aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d0dc      	beq.n	8002362 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0ed      	b.n	80025a0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7fe fe25 	bl	8001020 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0201 	orr.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023e6:	f7ff fda5 	bl	8001f34 <HAL_GetTick>
 80023ea:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023ec:	e012      	b.n	8002414 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023ee:	f7ff fda1 	bl	8001f34 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b0a      	cmp	r3, #10
 80023fa:	d90b      	bls.n	8002414 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2205      	movs	r2, #5
 800240c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0c5      	b.n	80025a0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0e5      	beq.n	80023ee <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0202 	bic.w	r2, r2, #2
 8002430:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002432:	f7ff fd7f 	bl	8001f34 <HAL_GetTick>
 8002436:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002438:	e012      	b.n	8002460 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800243a:	f7ff fd7b 	bl	8001f34 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b0a      	cmp	r3, #10
 8002446:	d90b      	bls.n	8002460 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2205      	movs	r2, #5
 8002458:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e09f      	b.n	80025a0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1e5      	bne.n	800243a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	7e1b      	ldrb	r3, [r3, #24]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d108      	bne.n	8002488 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	e007      	b.n	8002498 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002496:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	7e5b      	ldrb	r3, [r3, #25]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d108      	bne.n	80024b2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	e007      	b.n	80024c2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7e9b      	ldrb	r3, [r3, #26]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d108      	bne.n	80024dc <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0220 	orr.w	r2, r2, #32
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	e007      	b.n	80024ec <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0220 	bic.w	r2, r2, #32
 80024ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7edb      	ldrb	r3, [r3, #27]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d108      	bne.n	8002506 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0210 	bic.w	r2, r2, #16
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e007      	b.n	8002516 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0210 	orr.w	r2, r2, #16
 8002514:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7f1b      	ldrb	r3, [r3, #28]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d108      	bne.n	8002530 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0208 	orr.w	r2, r2, #8
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	e007      	b.n	8002540 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0208 	bic.w	r2, r2, #8
 800253e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	7f5b      	ldrb	r3, [r3, #29]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d108      	bne.n	800255a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0204 	orr.w	r2, r2, #4
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	e007      	b.n	800256a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0204 	bic.w	r2, r2, #4
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	ea42 0103 	orr.w	r1, r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	1e5a      	subs	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025be:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d003      	beq.n	80025ce <HAL_CAN_ConfigFilter+0x26>
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	f040 80aa 	bne.w	8002722 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025d4:	f043 0201 	orr.w	r2, r3, #1
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	2201      	movs	r2, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	401a      	ands	r2, r3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d123      	bne.n	8002650 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	43db      	mvns	r3, r3
 8002612:	401a      	ands	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800262a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3248      	adds	r2, #72	; 0x48
 8002630:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002644:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002646:	6979      	ldr	r1, [r7, #20]
 8002648:	3348      	adds	r3, #72	; 0x48
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	440b      	add	r3, r1
 800264e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d122      	bne.n	800269e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	431a      	orrs	r2, r3
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002678:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	3248      	adds	r2, #72	; 0x48
 800267e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002692:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002694:	6979      	ldr	r1, [r7, #20]
 8002696:	3348      	adds	r3, #72	; 0x48
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	401a      	ands	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80026b8:	e007      	b.n	80026ca <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	43db      	mvns	r3, r3
 80026dc:	401a      	ands	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80026e4:	e007      	b.n	80026f6 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d107      	bne.n	800270e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	431a      	orrs	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002714:	f023 0201 	bic.w	r2, r3, #1
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e006      	b.n	8002730 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
  }
}
 8002730:	4618      	mov	r0, r3
 8002732:	371c      	adds	r7, #28
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d12e      	bne.n	80027ac <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2202      	movs	r2, #2
 8002752:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0201 	bic.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002766:	f7ff fbe5 	bl	8001f34 <HAL_GetTick>
 800276a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800276c:	e012      	b.n	8002794 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800276e:	f7ff fbe1 	bl	8001f34 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b0a      	cmp	r3, #10
 800277a:	d90b      	bls.n	8002794 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2205      	movs	r2, #5
 800278c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e012      	b.n	80027ba <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e5      	bne.n	800276e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e006      	b.n	80027ba <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
  }
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80027c2:	b480      	push	{r7}
 80027c4:	b087      	sub	sp, #28
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d003      	beq.n	80027e6 <HAL_CAN_GetRxMessage+0x24>
 80027de:	7dfb      	ldrb	r3, [r7, #23]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	f040 80f3 	bne.w	80029cc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10e      	bne.n	800280a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d116      	bne.n	8002828 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0e7      	b.n	80029da <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d107      	bne.n	8002828 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0d8      	b.n	80029da <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	331b      	adds	r3, #27
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	4413      	add	r3, r2
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0204 	and.w	r2, r3, #4
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10c      	bne.n	8002860 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	331b      	adds	r3, #27
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	4413      	add	r3, r2
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0d5b      	lsrs	r3, r3, #21
 8002856:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	e00b      	b.n	8002878 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	331b      	adds	r3, #27
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	4413      	add	r3, r2
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	08db      	lsrs	r3, r3, #3
 8002870:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	331b      	adds	r3, #27
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	4413      	add	r3, r2
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0202 	and.w	r2, r3, #2
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	331b      	adds	r3, #27
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	4413      	add	r3, r2
 800289a:	3304      	adds	r3, #4
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 020f 	and.w	r2, r3, #15
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	331b      	adds	r3, #27
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	4413      	add	r3, r2
 80028b2:	3304      	adds	r3, #4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	331b      	adds	r3, #27
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	4413      	add	r3, r2
 80028ca:	3304      	adds	r3, #4
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	0c1b      	lsrs	r3, r3, #16
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	4413      	add	r3, r2
 80028e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	0a1a      	lsrs	r2, r3, #8
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	3301      	adds	r3, #1
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	4413      	add	r3, r2
 8002910:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	0c1a      	lsrs	r2, r3, #16
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	3302      	adds	r3, #2
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	4413      	add	r3, r2
 800292a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	0e1a      	lsrs	r2, r3, #24
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	3303      	adds	r3, #3
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	4413      	add	r3, r2
 8002944:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	3304      	adds	r3, #4
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	4413      	add	r3, r2
 800295c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	0a1a      	lsrs	r2, r3, #8
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	3305      	adds	r3, #5
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	4413      	add	r3, r2
 8002976:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0c1a      	lsrs	r2, r3, #16
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	3306      	adds	r3, #6
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	4413      	add	r3, r2
 8002990:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	0e1a      	lsrs	r2, r3, #24
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	3307      	adds	r3, #7
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d108      	bne.n	80029b8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0220 	orr.w	r2, r2, #32
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	e007      	b.n	80029c8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0220 	orr.w	r2, r2, #32
 80029c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e006      	b.n	80029da <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
  }
}
 80029da:	4618      	mov	r0, r3
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d002      	beq.n	8002a02 <HAL_CAN_ActivateNotification+0x1e>
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d109      	bne.n	8002a16 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6959      	ldr	r1, [r3, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e006      	b.n	8002a24 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
  }
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b08a      	sub	sp, #40	; 0x28
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d07c      	beq.n	8002b6e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d023      	beq.n	8002ac6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2201      	movs	r2, #1
 8002a84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f983 	bl	8002d9c <HAL_CAN_TxMailbox0CompleteCallback>
 8002a96:	e016      	b.n	8002ac6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d004      	beq.n	8002aac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aaa:	e00c      	b.n	8002ac6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d004      	beq.n	8002ac0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
 8002abe:	e002      	b.n	8002ac6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f986 	bl	8002dd2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d024      	beq.n	8002b1a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ad8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f962 	bl	8002dae <HAL_CAN_TxMailbox1CompleteCallback>
 8002aea:	e016      	b.n	8002b1a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d004      	beq.n	8002b00 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
 8002afe:	e00c      	b.n	8002b1a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d004      	beq.n	8002b14 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
 8002b12:	e002      	b.n	8002b1a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f965 	bl	8002de4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d024      	beq.n	8002b6e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f941 	bl	8002dc0 <HAL_CAN_TxMailbox2CompleteCallback>
 8002b3e:	e016      	b.n	8002b6e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d004      	beq.n	8002b54 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
 8002b52:	e00c      	b.n	8002b6e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d004      	beq.n	8002b68 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
 8002b66:	e002      	b.n	8002b6e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f944 	bl	8002df6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00c      	beq.n	8002b92 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d007      	beq.n	8002b92 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2210      	movs	r2, #16
 8002b90:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00b      	beq.n	8002bb4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d006      	beq.n	8002bb4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2208      	movs	r2, #8
 8002bac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f933 	bl	8002e1a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f91b 	bl	8002e08 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00c      	beq.n	8002bf6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d007      	beq.n	8002bf6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00b      	beq.n	8002c18 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d006      	beq.n	8002c18 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2208      	movs	r2, #8
 8002c10:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f913 	bl	8002e3e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f8fb 	bl	8002e2c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00b      	beq.n	8002c58 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d006      	beq.n	8002c58 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2210      	movs	r2, #16
 8002c50:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f8fc 	bl	8002e50 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d006      	beq.n	8002c7a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2208      	movs	r2, #8
 8002c72:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f8f4 	bl	8002e62 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d07b      	beq.n	8002d7c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d072      	beq.n	8002d74 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	f043 0302 	orr.w	r3, r3, #2
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	f043 0304 	orr.w	r3, r3, #4
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d043      	beq.n	8002d74 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d03e      	beq.n	8002d74 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cfc:	2b60      	cmp	r3, #96	; 0x60
 8002cfe:	d02b      	beq.n	8002d58 <HAL_CAN_IRQHandler+0x32a>
 8002d00:	2b60      	cmp	r3, #96	; 0x60
 8002d02:	d82e      	bhi.n	8002d62 <HAL_CAN_IRQHandler+0x334>
 8002d04:	2b50      	cmp	r3, #80	; 0x50
 8002d06:	d022      	beq.n	8002d4e <HAL_CAN_IRQHandler+0x320>
 8002d08:	2b50      	cmp	r3, #80	; 0x50
 8002d0a:	d82a      	bhi.n	8002d62 <HAL_CAN_IRQHandler+0x334>
 8002d0c:	2b40      	cmp	r3, #64	; 0x40
 8002d0e:	d019      	beq.n	8002d44 <HAL_CAN_IRQHandler+0x316>
 8002d10:	2b40      	cmp	r3, #64	; 0x40
 8002d12:	d826      	bhi.n	8002d62 <HAL_CAN_IRQHandler+0x334>
 8002d14:	2b30      	cmp	r3, #48	; 0x30
 8002d16:	d010      	beq.n	8002d3a <HAL_CAN_IRQHandler+0x30c>
 8002d18:	2b30      	cmp	r3, #48	; 0x30
 8002d1a:	d822      	bhi.n	8002d62 <HAL_CAN_IRQHandler+0x334>
 8002d1c:	2b10      	cmp	r3, #16
 8002d1e:	d002      	beq.n	8002d26 <HAL_CAN_IRQHandler+0x2f8>
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d005      	beq.n	8002d30 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d24:	e01d      	b.n	8002d62 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	f043 0308 	orr.w	r3, r3, #8
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d2e:	e019      	b.n	8002d64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	f043 0310 	orr.w	r3, r3, #16
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d38:	e014      	b.n	8002d64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	f043 0320 	orr.w	r3, r3, #32
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d42:	e00f      	b.n	8002d64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d4c:	e00a      	b.n	8002d64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d56:	e005      	b.n	8002d64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d60:	e000      	b.n	8002d64 <HAL_CAN_IRQHandler+0x336>
            break;
 8002d62:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d72:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2204      	movs	r2, #4
 8002d7a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f870 	bl	8002e74 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d94:	bf00      	nop
 8002d96:	3728      	adds	r7, #40	; 0x28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr

08002e62 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
	...

08002e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eba:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	60d3      	str	r3, [r2, #12]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	f003 0307 	and.w	r3, r3, #7
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	db0b      	blt.n	8002f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	f003 021f 	and.w	r2, r3, #31
 8002f04:	4906      	ldr	r1, [pc, #24]	; (8002f20 <__NVIC_EnableIRQ+0x34>)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	e000e100 	.word	0xe000e100

08002f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	6039      	str	r1, [r7, #0]
 8002f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	db0a      	blt.n	8002f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	490c      	ldr	r1, [pc, #48]	; (8002f70 <__NVIC_SetPriority+0x4c>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	0112      	lsls	r2, r2, #4
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	440b      	add	r3, r1
 8002f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f4c:	e00a      	b.n	8002f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4908      	ldr	r1, [pc, #32]	; (8002f74 <__NVIC_SetPriority+0x50>)
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	3b04      	subs	r3, #4
 8002f5c:	0112      	lsls	r2, r2, #4
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	440b      	add	r3, r1
 8002f62:	761a      	strb	r2, [r3, #24]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	e000e100 	.word	0xe000e100
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b089      	sub	sp, #36	; 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f1c3 0307 	rsb	r3, r3, #7
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	bf28      	it	cs
 8002f96:	2304      	movcs	r3, #4
 8002f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d902      	bls.n	8002fa8 <NVIC_EncodePriority+0x30>
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3b03      	subs	r3, #3
 8002fa6:	e000      	b.n	8002faa <NVIC_EncodePriority+0x32>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fac:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	401a      	ands	r2, r3
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	43d9      	mvns	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	4313      	orrs	r3, r2
         );
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3724      	adds	r7, #36	; 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fec:	d301      	bcc.n	8002ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e00f      	b.n	8003012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	; (800301c <SysTick_Config+0x40>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ffa:	210f      	movs	r1, #15
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8003000:	f7ff ff90 	bl	8002f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <SysTick_Config+0x40>)
 8003006:	2200      	movs	r2, #0
 8003008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800300a:	4b04      	ldr	r3, [pc, #16]	; (800301c <SysTick_Config+0x40>)
 800300c:	2207      	movs	r2, #7
 800300e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	e000e010 	.word	0xe000e010

08003020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ff2d 	bl	8002e88 <__NVIC_SetPriorityGrouping>
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	4603      	mov	r3, r0
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003048:	f7ff ff42 	bl	8002ed0 <__NVIC_GetPriorityGrouping>
 800304c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	6978      	ldr	r0, [r7, #20]
 8003054:	f7ff ff90 	bl	8002f78 <NVIC_EncodePriority>
 8003058:	4602      	mov	r2, r0
 800305a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff ff5f 	bl	8002f24 <__NVIC_SetPriority>
}
 8003066:	bf00      	nop
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	4603      	mov	r3, r0
 8003076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ff35 	bl	8002eec <__NVIC_EnableIRQ>
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff ffa2 	bl	8002fdc <SysTick_Config>
 8003098:	4603      	mov	r3, r0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e043      	b.n	8003142 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	4b22      	ldr	r3, [pc, #136]	; (800314c <HAL_DMA_Init+0xa8>)
 80030c2:	4413      	add	r3, r2
 80030c4:	4a22      	ldr	r2, [pc, #136]	; (8003150 <HAL_DMA_Init+0xac>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	009a      	lsls	r2, r3, #2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <HAL_DMA_Init+0xb0>)
 80030d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80030f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80030fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003108:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003114:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr
 800314c:	bffdfff8 	.word	0xbffdfff8
 8003150:	cccccccd 	.word	0xcccccccd
 8003154:	40020000 	.word	0x40020000

08003158 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800316a:	2b02      	cmp	r3, #2
 800316c:	d008      	beq.n	8003180 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2204      	movs	r2, #4
 8003172:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e020      	b.n	80031c2 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 020e 	bic.w	r2, r2, #14
 800318e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f202 	lsl.w	r2, r1, r2
 80031ae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d005      	beq.n	80031ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2204      	movs	r2, #4
 80031e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
 80031ec:	e051      	b.n	8003292 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 020e 	bic.w	r2, r2, #14
 80031fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0201 	bic.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a22      	ldr	r2, [pc, #136]	; (800329c <HAL_DMA_Abort_IT+0xd0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d029      	beq.n	800326c <HAL_DMA_Abort_IT+0xa0>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a20      	ldr	r2, [pc, #128]	; (80032a0 <HAL_DMA_Abort_IT+0xd4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d022      	beq.n	8003268 <HAL_DMA_Abort_IT+0x9c>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a1f      	ldr	r2, [pc, #124]	; (80032a4 <HAL_DMA_Abort_IT+0xd8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d01a      	beq.n	8003262 <HAL_DMA_Abort_IT+0x96>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1d      	ldr	r2, [pc, #116]	; (80032a8 <HAL_DMA_Abort_IT+0xdc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d012      	beq.n	800325c <HAL_DMA_Abort_IT+0x90>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1c      	ldr	r2, [pc, #112]	; (80032ac <HAL_DMA_Abort_IT+0xe0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00a      	beq.n	8003256 <HAL_DMA_Abort_IT+0x8a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1a      	ldr	r2, [pc, #104]	; (80032b0 <HAL_DMA_Abort_IT+0xe4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d102      	bne.n	8003250 <HAL_DMA_Abort_IT+0x84>
 800324a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800324e:	e00e      	b.n	800326e <HAL_DMA_Abort_IT+0xa2>
 8003250:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003254:	e00b      	b.n	800326e <HAL_DMA_Abort_IT+0xa2>
 8003256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800325a:	e008      	b.n	800326e <HAL_DMA_Abort_IT+0xa2>
 800325c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003260:	e005      	b.n	800326e <HAL_DMA_Abort_IT+0xa2>
 8003262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003266:	e002      	b.n	800326e <HAL_DMA_Abort_IT+0xa2>
 8003268:	2310      	movs	r3, #16
 800326a:	e000      	b.n	800326e <HAL_DMA_Abort_IT+0xa2>
 800326c:	2301      	movs	r3, #1
 800326e:	4a11      	ldr	r2, [pc, #68]	; (80032b4 <HAL_DMA_Abort_IT+0xe8>)
 8003270:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
    } 
  }
  return status;
 8003292:	7bfb      	ldrb	r3, [r7, #15]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40020008 	.word	0x40020008
 80032a0:	4002001c 	.word	0x4002001c
 80032a4:	40020030 	.word	0x40020030
 80032a8:	40020044 	.word	0x40020044
 80032ac:	40020058 	.word	0x40020058
 80032b0:	4002006c 	.word	0x4002006c
 80032b4:	40020000 	.word	0x40020000

080032b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	2204      	movs	r2, #4
 80032d6:	409a      	lsls	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d04f      	beq.n	8003380 <HAL_DMA_IRQHandler+0xc8>
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d04a      	beq.n	8003380 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d107      	bne.n	8003308 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0204 	bic.w	r2, r2, #4
 8003306:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a66      	ldr	r2, [pc, #408]	; (80034a8 <HAL_DMA_IRQHandler+0x1f0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d029      	beq.n	8003366 <HAL_DMA_IRQHandler+0xae>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a65      	ldr	r2, [pc, #404]	; (80034ac <HAL_DMA_IRQHandler+0x1f4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d022      	beq.n	8003362 <HAL_DMA_IRQHandler+0xaa>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a63      	ldr	r2, [pc, #396]	; (80034b0 <HAL_DMA_IRQHandler+0x1f8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01a      	beq.n	800335c <HAL_DMA_IRQHandler+0xa4>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a62      	ldr	r2, [pc, #392]	; (80034b4 <HAL_DMA_IRQHandler+0x1fc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d012      	beq.n	8003356 <HAL_DMA_IRQHandler+0x9e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a60      	ldr	r2, [pc, #384]	; (80034b8 <HAL_DMA_IRQHandler+0x200>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00a      	beq.n	8003350 <HAL_DMA_IRQHandler+0x98>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a5f      	ldr	r2, [pc, #380]	; (80034bc <HAL_DMA_IRQHandler+0x204>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d102      	bne.n	800334a <HAL_DMA_IRQHandler+0x92>
 8003344:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003348:	e00e      	b.n	8003368 <HAL_DMA_IRQHandler+0xb0>
 800334a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800334e:	e00b      	b.n	8003368 <HAL_DMA_IRQHandler+0xb0>
 8003350:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003354:	e008      	b.n	8003368 <HAL_DMA_IRQHandler+0xb0>
 8003356:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800335a:	e005      	b.n	8003368 <HAL_DMA_IRQHandler+0xb0>
 800335c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003360:	e002      	b.n	8003368 <HAL_DMA_IRQHandler+0xb0>
 8003362:	2340      	movs	r3, #64	; 0x40
 8003364:	e000      	b.n	8003368 <HAL_DMA_IRQHandler+0xb0>
 8003366:	2304      	movs	r3, #4
 8003368:	4a55      	ldr	r2, [pc, #340]	; (80034c0 <HAL_DMA_IRQHandler+0x208>)
 800336a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 8094 	beq.w	800349e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800337e:	e08e      	b.n	800349e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	2202      	movs	r2, #2
 8003386:	409a      	lsls	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d056      	beq.n	800343e <HAL_DMA_IRQHandler+0x186>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d051      	beq.n	800343e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 020a 	bic.w	r2, r2, #10
 80033b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a38      	ldr	r2, [pc, #224]	; (80034a8 <HAL_DMA_IRQHandler+0x1f0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d029      	beq.n	800341e <HAL_DMA_IRQHandler+0x166>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a37      	ldr	r2, [pc, #220]	; (80034ac <HAL_DMA_IRQHandler+0x1f4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d022      	beq.n	800341a <HAL_DMA_IRQHandler+0x162>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a35      	ldr	r2, [pc, #212]	; (80034b0 <HAL_DMA_IRQHandler+0x1f8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d01a      	beq.n	8003414 <HAL_DMA_IRQHandler+0x15c>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a34      	ldr	r2, [pc, #208]	; (80034b4 <HAL_DMA_IRQHandler+0x1fc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d012      	beq.n	800340e <HAL_DMA_IRQHandler+0x156>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a32      	ldr	r2, [pc, #200]	; (80034b8 <HAL_DMA_IRQHandler+0x200>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00a      	beq.n	8003408 <HAL_DMA_IRQHandler+0x150>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a31      	ldr	r2, [pc, #196]	; (80034bc <HAL_DMA_IRQHandler+0x204>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d102      	bne.n	8003402 <HAL_DMA_IRQHandler+0x14a>
 80033fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003400:	e00e      	b.n	8003420 <HAL_DMA_IRQHandler+0x168>
 8003402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003406:	e00b      	b.n	8003420 <HAL_DMA_IRQHandler+0x168>
 8003408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800340c:	e008      	b.n	8003420 <HAL_DMA_IRQHandler+0x168>
 800340e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003412:	e005      	b.n	8003420 <HAL_DMA_IRQHandler+0x168>
 8003414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003418:	e002      	b.n	8003420 <HAL_DMA_IRQHandler+0x168>
 800341a:	2320      	movs	r3, #32
 800341c:	e000      	b.n	8003420 <HAL_DMA_IRQHandler+0x168>
 800341e:	2302      	movs	r3, #2
 8003420:	4a27      	ldr	r2, [pc, #156]	; (80034c0 <HAL_DMA_IRQHandler+0x208>)
 8003422:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	d034      	beq.n	800349e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800343c:	e02f      	b.n	800349e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	2208      	movs	r2, #8
 8003444:	409a      	lsls	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d028      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x1e8>
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d023      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 020e 	bic.w	r2, r2, #14
 8003466:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003470:	2101      	movs	r1, #1
 8003472:	fa01 f202 	lsl.w	r2, r1, r2
 8003476:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	2b00      	cmp	r3, #0
 8003494:	d004      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
    }
  }
  return;
 800349e:	bf00      	nop
 80034a0:	bf00      	nop
}
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40020008 	.word	0x40020008
 80034ac:	4002001c 	.word	0x4002001c
 80034b0:	40020030 	.word	0x40020030
 80034b4:	40020044 	.word	0x40020044
 80034b8:	40020058 	.word	0x40020058
 80034bc:	4002006c 	.word	0x4002006c
 80034c0:	40020000 	.word	0x40020000

080034c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b08b      	sub	sp, #44	; 0x2c
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ce:	2300      	movs	r3, #0
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034d2:	2300      	movs	r3, #0
 80034d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034d6:	e169      	b.n	80037ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034d8:	2201      	movs	r2, #1
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	f040 8158 	bne.w	80037a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	4a9a      	ldr	r2, [pc, #616]	; (8003764 <HAL_GPIO_Init+0x2a0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d05e      	beq.n	80035be <HAL_GPIO_Init+0xfa>
 8003500:	4a98      	ldr	r2, [pc, #608]	; (8003764 <HAL_GPIO_Init+0x2a0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d875      	bhi.n	80035f2 <HAL_GPIO_Init+0x12e>
 8003506:	4a98      	ldr	r2, [pc, #608]	; (8003768 <HAL_GPIO_Init+0x2a4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d058      	beq.n	80035be <HAL_GPIO_Init+0xfa>
 800350c:	4a96      	ldr	r2, [pc, #600]	; (8003768 <HAL_GPIO_Init+0x2a4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d86f      	bhi.n	80035f2 <HAL_GPIO_Init+0x12e>
 8003512:	4a96      	ldr	r2, [pc, #600]	; (800376c <HAL_GPIO_Init+0x2a8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d052      	beq.n	80035be <HAL_GPIO_Init+0xfa>
 8003518:	4a94      	ldr	r2, [pc, #592]	; (800376c <HAL_GPIO_Init+0x2a8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d869      	bhi.n	80035f2 <HAL_GPIO_Init+0x12e>
 800351e:	4a94      	ldr	r2, [pc, #592]	; (8003770 <HAL_GPIO_Init+0x2ac>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d04c      	beq.n	80035be <HAL_GPIO_Init+0xfa>
 8003524:	4a92      	ldr	r2, [pc, #584]	; (8003770 <HAL_GPIO_Init+0x2ac>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d863      	bhi.n	80035f2 <HAL_GPIO_Init+0x12e>
 800352a:	4a92      	ldr	r2, [pc, #584]	; (8003774 <HAL_GPIO_Init+0x2b0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d046      	beq.n	80035be <HAL_GPIO_Init+0xfa>
 8003530:	4a90      	ldr	r2, [pc, #576]	; (8003774 <HAL_GPIO_Init+0x2b0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d85d      	bhi.n	80035f2 <HAL_GPIO_Init+0x12e>
 8003536:	2b12      	cmp	r3, #18
 8003538:	d82a      	bhi.n	8003590 <HAL_GPIO_Init+0xcc>
 800353a:	2b12      	cmp	r3, #18
 800353c:	d859      	bhi.n	80035f2 <HAL_GPIO_Init+0x12e>
 800353e:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <HAL_GPIO_Init+0x80>)
 8003540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003544:	080035bf 	.word	0x080035bf
 8003548:	08003599 	.word	0x08003599
 800354c:	080035ab 	.word	0x080035ab
 8003550:	080035ed 	.word	0x080035ed
 8003554:	080035f3 	.word	0x080035f3
 8003558:	080035f3 	.word	0x080035f3
 800355c:	080035f3 	.word	0x080035f3
 8003560:	080035f3 	.word	0x080035f3
 8003564:	080035f3 	.word	0x080035f3
 8003568:	080035f3 	.word	0x080035f3
 800356c:	080035f3 	.word	0x080035f3
 8003570:	080035f3 	.word	0x080035f3
 8003574:	080035f3 	.word	0x080035f3
 8003578:	080035f3 	.word	0x080035f3
 800357c:	080035f3 	.word	0x080035f3
 8003580:	080035f3 	.word	0x080035f3
 8003584:	080035f3 	.word	0x080035f3
 8003588:	080035a1 	.word	0x080035a1
 800358c:	080035b5 	.word	0x080035b5
 8003590:	4a79      	ldr	r2, [pc, #484]	; (8003778 <HAL_GPIO_Init+0x2b4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003596:	e02c      	b.n	80035f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	623b      	str	r3, [r7, #32]
          break;
 800359e:	e029      	b.n	80035f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	3304      	adds	r3, #4
 80035a6:	623b      	str	r3, [r7, #32]
          break;
 80035a8:	e024      	b.n	80035f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	3308      	adds	r3, #8
 80035b0:	623b      	str	r3, [r7, #32]
          break;
 80035b2:	e01f      	b.n	80035f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	330c      	adds	r3, #12
 80035ba:	623b      	str	r3, [r7, #32]
          break;
 80035bc:	e01a      	b.n	80035f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d102      	bne.n	80035cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035c6:	2304      	movs	r3, #4
 80035c8:	623b      	str	r3, [r7, #32]
          break;
 80035ca:	e013      	b.n	80035f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035d4:	2308      	movs	r3, #8
 80035d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	611a      	str	r2, [r3, #16]
          break;
 80035de:	e009      	b.n	80035f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035e0:	2308      	movs	r3, #8
 80035e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	615a      	str	r2, [r3, #20]
          break;
 80035ea:	e003      	b.n	80035f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035ec:	2300      	movs	r3, #0
 80035ee:	623b      	str	r3, [r7, #32]
          break;
 80035f0:	e000      	b.n	80035f4 <HAL_GPIO_Init+0x130>
          break;
 80035f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2bff      	cmp	r3, #255	; 0xff
 80035f8:	d801      	bhi.n	80035fe <HAL_GPIO_Init+0x13a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	e001      	b.n	8003602 <HAL_GPIO_Init+0x13e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3304      	adds	r3, #4
 8003602:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2bff      	cmp	r3, #255	; 0xff
 8003608:	d802      	bhi.n	8003610 <HAL_GPIO_Init+0x14c>
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	e002      	b.n	8003616 <HAL_GPIO_Init+0x152>
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	3b08      	subs	r3, #8
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	210f      	movs	r1, #15
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	fa01 f303 	lsl.w	r3, r1, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	401a      	ands	r2, r3
 8003628:	6a39      	ldr	r1, [r7, #32]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	fa01 f303 	lsl.w	r3, r1, r3
 8003630:	431a      	orrs	r2, r3
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 80b1 	beq.w	80037a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003644:	4b4d      	ldr	r3, [pc, #308]	; (800377c <HAL_GPIO_Init+0x2b8>)
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	4a4c      	ldr	r2, [pc, #304]	; (800377c <HAL_GPIO_Init+0x2b8>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6193      	str	r3, [r2, #24]
 8003650:	4b4a      	ldr	r3, [pc, #296]	; (800377c <HAL_GPIO_Init+0x2b8>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800365c:	4a48      	ldr	r2, [pc, #288]	; (8003780 <HAL_GPIO_Init+0x2bc>)
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	3302      	adds	r3, #2
 8003664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003668:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	220f      	movs	r2, #15
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4013      	ands	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a40      	ldr	r2, [pc, #256]	; (8003784 <HAL_GPIO_Init+0x2c0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d013      	beq.n	80036b0 <HAL_GPIO_Init+0x1ec>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a3f      	ldr	r2, [pc, #252]	; (8003788 <HAL_GPIO_Init+0x2c4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00d      	beq.n	80036ac <HAL_GPIO_Init+0x1e8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a3e      	ldr	r2, [pc, #248]	; (800378c <HAL_GPIO_Init+0x2c8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d007      	beq.n	80036a8 <HAL_GPIO_Init+0x1e4>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a3d      	ldr	r2, [pc, #244]	; (8003790 <HAL_GPIO_Init+0x2cc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d101      	bne.n	80036a4 <HAL_GPIO_Init+0x1e0>
 80036a0:	2303      	movs	r3, #3
 80036a2:	e006      	b.n	80036b2 <HAL_GPIO_Init+0x1ee>
 80036a4:	2304      	movs	r3, #4
 80036a6:	e004      	b.n	80036b2 <HAL_GPIO_Init+0x1ee>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e002      	b.n	80036b2 <HAL_GPIO_Init+0x1ee>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <HAL_GPIO_Init+0x1ee>
 80036b0:	2300      	movs	r3, #0
 80036b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b4:	f002 0203 	and.w	r2, r2, #3
 80036b8:	0092      	lsls	r2, r2, #2
 80036ba:	4093      	lsls	r3, r2
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036c2:	492f      	ldr	r1, [pc, #188]	; (8003780 <HAL_GPIO_Init+0x2bc>)
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	089b      	lsrs	r3, r3, #2
 80036c8:	3302      	adds	r3, #2
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d006      	beq.n	80036ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036dc:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	492c      	ldr	r1, [pc, #176]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	600b      	str	r3, [r1, #0]
 80036e8:	e006      	b.n	80036f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036ea:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	4928      	ldr	r1, [pc, #160]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d006      	beq.n	8003712 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003704:	4b23      	ldr	r3, [pc, #140]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	4922      	ldr	r1, [pc, #136]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
 8003710:	e006      	b.n	8003720 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	43db      	mvns	r3, r3
 800371a:	491e      	ldr	r1, [pc, #120]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 800371c:	4013      	ands	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d006      	beq.n	800373a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800372c:	4b19      	ldr	r3, [pc, #100]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	4918      	ldr	r1, [pc, #96]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	4313      	orrs	r3, r2
 8003736:	608b      	str	r3, [r1, #8]
 8003738:	e006      	b.n	8003748 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800373a:	4b16      	ldr	r3, [pc, #88]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	43db      	mvns	r3, r3
 8003742:	4914      	ldr	r1, [pc, #80]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 8003744:	4013      	ands	r3, r2
 8003746:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d021      	beq.n	8003798 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	490e      	ldr	r1, [pc, #56]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	60cb      	str	r3, [r1, #12]
 8003760:	e021      	b.n	80037a6 <HAL_GPIO_Init+0x2e2>
 8003762:	bf00      	nop
 8003764:	10320000 	.word	0x10320000
 8003768:	10310000 	.word	0x10310000
 800376c:	10220000 	.word	0x10220000
 8003770:	10210000 	.word	0x10210000
 8003774:	10120000 	.word	0x10120000
 8003778:	10110000 	.word	0x10110000
 800377c:	40021000 	.word	0x40021000
 8003780:	40010000 	.word	0x40010000
 8003784:	40010800 	.word	0x40010800
 8003788:	40010c00 	.word	0x40010c00
 800378c:	40011000 	.word	0x40011000
 8003790:	40011400 	.word	0x40011400
 8003794:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_GPIO_Init+0x304>)
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	43db      	mvns	r3, r3
 80037a0:	4909      	ldr	r1, [pc, #36]	; (80037c8 <HAL_GPIO_Init+0x304>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	3301      	adds	r3, #1
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	fa22 f303 	lsr.w	r3, r2, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f47f ae8e 	bne.w	80034d8 <HAL_GPIO_Init+0x14>
  }
}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	372c      	adds	r7, #44	; 0x2c
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	40010400 	.word	0x40010400

080037cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	807b      	strh	r3, [r7, #2]
 80037d8:	4613      	mov	r3, r2
 80037da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037dc:	787b      	ldrb	r3, [r7, #1]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037e2:	887a      	ldrh	r2, [r7, #2]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037e8:	e003      	b.n	80037f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037ea:	887b      	ldrh	r3, [r7, #2]
 80037ec:	041a      	lsls	r2, r3, #16
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	611a      	str	r2, [r3, #16]
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800380e:	887a      	ldrh	r2, [r7, #2]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4013      	ands	r3, r2
 8003814:	041a      	lsls	r2, r3, #16
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	43d9      	mvns	r1, r3
 800381a:	887b      	ldrh	r3, [r7, #2]
 800381c:	400b      	ands	r3, r1
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	611a      	str	r2, [r3, #16]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr
	...

08003830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e26c      	b.n	8003d1c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8087 	beq.w	800395e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003850:	4b92      	ldr	r3, [pc, #584]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 030c 	and.w	r3, r3, #12
 8003858:	2b04      	cmp	r3, #4
 800385a:	d00c      	beq.n	8003876 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800385c:	4b8f      	ldr	r3, [pc, #572]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b08      	cmp	r3, #8
 8003866:	d112      	bne.n	800388e <HAL_RCC_OscConfig+0x5e>
 8003868:	4b8c      	ldr	r3, [pc, #560]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003874:	d10b      	bne.n	800388e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003876:	4b89      	ldr	r3, [pc, #548]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d06c      	beq.n	800395c <HAL_RCC_OscConfig+0x12c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d168      	bne.n	800395c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e246      	b.n	8003d1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003896:	d106      	bne.n	80038a6 <HAL_RCC_OscConfig+0x76>
 8003898:	4b80      	ldr	r3, [pc, #512]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a7f      	ldr	r2, [pc, #508]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 800389e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	e02e      	b.n	8003904 <HAL_RCC_OscConfig+0xd4>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x98>
 80038ae:	4b7b      	ldr	r3, [pc, #492]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a7a      	ldr	r2, [pc, #488]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	4b78      	ldr	r3, [pc, #480]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a77      	ldr	r2, [pc, #476]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	e01d      	b.n	8003904 <HAL_RCC_OscConfig+0xd4>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d0:	d10c      	bne.n	80038ec <HAL_RCC_OscConfig+0xbc>
 80038d2:	4b72      	ldr	r3, [pc, #456]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a71      	ldr	r2, [pc, #452]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	4b6f      	ldr	r3, [pc, #444]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a6e      	ldr	r2, [pc, #440]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e00b      	b.n	8003904 <HAL_RCC_OscConfig+0xd4>
 80038ec:	4b6b      	ldr	r3, [pc, #428]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a6a      	ldr	r2, [pc, #424]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b68      	ldr	r3, [pc, #416]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a67      	ldr	r2, [pc, #412]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003902:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d013      	beq.n	8003934 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390c:	f7fe fb12 	bl	8001f34 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003914:	f7fe fb0e 	bl	8001f34 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e1fa      	b.n	8003d1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	4b5d      	ldr	r3, [pc, #372]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0xe4>
 8003932:	e014      	b.n	800395e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7fe fafe 	bl	8001f34 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800393c:	f7fe fafa 	bl	8001f34 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b64      	cmp	r3, #100	; 0x64
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e1e6      	b.n	8003d1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394e:	4b53      	ldr	r3, [pc, #332]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x10c>
 800395a:	e000      	b.n	800395e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d063      	beq.n	8003a32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800396a:	4b4c      	ldr	r3, [pc, #304]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003976:	4b49      	ldr	r3, [pc, #292]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b08      	cmp	r3, #8
 8003980:	d11c      	bne.n	80039bc <HAL_RCC_OscConfig+0x18c>
 8003982:	4b46      	ldr	r3, [pc, #280]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d116      	bne.n	80039bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398e:	4b43      	ldr	r3, [pc, #268]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_RCC_OscConfig+0x176>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d001      	beq.n	80039a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e1ba      	b.n	8003d1c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a6:	4b3d      	ldr	r3, [pc, #244]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4939      	ldr	r1, [pc, #228]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ba:	e03a      	b.n	8003a32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d020      	beq.n	8003a06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c4:	4b36      	ldr	r3, [pc, #216]	; (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ca:	f7fe fab3 	bl	8001f34 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039d2:	f7fe faaf 	bl	8001f34 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e19b      	b.n	8003d1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e4:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f0:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	4927      	ldr	r1, [pc, #156]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	600b      	str	r3, [r1, #0]
 8003a04:	e015      	b.n	8003a32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a06:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fe fa92 	bl	8001f34 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a14:	f7fe fa8e 	bl	8001f34 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e17a      	b.n	8003d1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a26:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d03a      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d019      	beq.n	8003a7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a46:	4b17      	ldr	r3, [pc, #92]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4c:	f7fe fa72 	bl	8001f34 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a54:	f7fe fa6e 	bl	8001f34 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e15a      	b.n	8003d1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a66:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a72:	2001      	movs	r0, #1
 8003a74:	f000 fad8 	bl	8004028 <RCC_Delay>
 8003a78:	e01c      	b.n	8003ab4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a80:	f7fe fa58 	bl	8001f34 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a86:	e00f      	b.n	8003aa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a88:	f7fe fa54 	bl	8001f34 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d908      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e140      	b.n	8003d1c <HAL_RCC_OscConfig+0x4ec>
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	42420000 	.word	0x42420000
 8003aa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa8:	4b9e      	ldr	r3, [pc, #632]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e9      	bne.n	8003a88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80a6 	beq.w	8003c0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac6:	4b97      	ldr	r3, [pc, #604]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10d      	bne.n	8003aee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad2:	4b94      	ldr	r3, [pc, #592]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	4a93      	ldr	r2, [pc, #588]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003adc:	61d3      	str	r3, [r2, #28]
 8003ade:	4b91      	ldr	r3, [pc, #580]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aea:	2301      	movs	r3, #1
 8003aec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aee:	4b8e      	ldr	r3, [pc, #568]	; (8003d28 <HAL_RCC_OscConfig+0x4f8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d118      	bne.n	8003b2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003afa:	4b8b      	ldr	r3, [pc, #556]	; (8003d28 <HAL_RCC_OscConfig+0x4f8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a8a      	ldr	r2, [pc, #552]	; (8003d28 <HAL_RCC_OscConfig+0x4f8>)
 8003b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b06:	f7fe fa15 	bl	8001f34 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0e:	f7fe fa11 	bl	8001f34 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b64      	cmp	r3, #100	; 0x64
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e0fd      	b.n	8003d1c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b20:	4b81      	ldr	r3, [pc, #516]	; (8003d28 <HAL_RCC_OscConfig+0x4f8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0f0      	beq.n	8003b0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d106      	bne.n	8003b42 <HAL_RCC_OscConfig+0x312>
 8003b34:	4b7b      	ldr	r3, [pc, #492]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	4a7a      	ldr	r2, [pc, #488]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	6213      	str	r3, [r2, #32]
 8003b40:	e02d      	b.n	8003b9e <HAL_RCC_OscConfig+0x36e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0x334>
 8003b4a:	4b76      	ldr	r3, [pc, #472]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	4a75      	ldr	r2, [pc, #468]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	6213      	str	r3, [r2, #32]
 8003b56:	4b73      	ldr	r3, [pc, #460]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	4a72      	ldr	r2, [pc, #456]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003b5c:	f023 0304 	bic.w	r3, r3, #4
 8003b60:	6213      	str	r3, [r2, #32]
 8003b62:	e01c      	b.n	8003b9e <HAL_RCC_OscConfig+0x36e>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b05      	cmp	r3, #5
 8003b6a:	d10c      	bne.n	8003b86 <HAL_RCC_OscConfig+0x356>
 8003b6c:	4b6d      	ldr	r3, [pc, #436]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	4a6c      	ldr	r2, [pc, #432]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003b72:	f043 0304 	orr.w	r3, r3, #4
 8003b76:	6213      	str	r3, [r2, #32]
 8003b78:	4b6a      	ldr	r3, [pc, #424]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	4a69      	ldr	r2, [pc, #420]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	6213      	str	r3, [r2, #32]
 8003b84:	e00b      	b.n	8003b9e <HAL_RCC_OscConfig+0x36e>
 8003b86:	4b67      	ldr	r3, [pc, #412]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	4a66      	ldr	r2, [pc, #408]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	6213      	str	r3, [r2, #32]
 8003b92:	4b64      	ldr	r3, [pc, #400]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	4a63      	ldr	r2, [pc, #396]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003b98:	f023 0304 	bic.w	r3, r3, #4
 8003b9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d015      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba6:	f7fe f9c5 	bl	8001f34 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fe f9c1 	bl	8001f34 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0ab      	b.n	8003d1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc4:	4b57      	ldr	r3, [pc, #348]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ee      	beq.n	8003bae <HAL_RCC_OscConfig+0x37e>
 8003bd0:	e014      	b.n	8003bfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd2:	f7fe f9af 	bl	8001f34 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fe f9ab 	bl	8001f34 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e095      	b.n	8003d1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf0:	4b4c      	ldr	r3, [pc, #304]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ee      	bne.n	8003bda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d105      	bne.n	8003c0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c02:	4b48      	ldr	r3, [pc, #288]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	4a47      	ldr	r2, [pc, #284]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 8081 	beq.w	8003d1a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c18:	4b42      	ldr	r3, [pc, #264]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 030c 	and.w	r3, r3, #12
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d061      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d146      	bne.n	8003cba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2c:	4b3f      	ldr	r3, [pc, #252]	; (8003d2c <HAL_RCC_OscConfig+0x4fc>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c32:	f7fe f97f 	bl	8001f34 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3a:	f7fe f97b 	bl	8001f34 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e067      	b.n	8003d1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c4c:	4b35      	ldr	r3, [pc, #212]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f0      	bne.n	8003c3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c60:	d108      	bne.n	8003c74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c62:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	492d      	ldr	r1, [pc, #180]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c74:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a19      	ldr	r1, [r3, #32]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	430b      	orrs	r3, r1
 8003c86:	4927      	ldr	r1, [pc, #156]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c8c:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <HAL_RCC_OscConfig+0x4fc>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c92:	f7fe f94f 	bl	8001f34 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c9a:	f7fe f94b 	bl	8001f34 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e037      	b.n	8003d1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cac:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x46a>
 8003cb8:	e02f      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cba:	4b1c      	ldr	r3, [pc, #112]	; (8003d2c <HAL_RCC_OscConfig+0x4fc>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc0:	f7fe f938 	bl	8001f34 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fe f934 	bl	8001f34 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e020      	b.n	8003d1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cda:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x498>
 8003ce6:	e018      	b.n	8003d1a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e013      	b.n	8003d1c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCC_OscConfig+0x4f4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d106      	bne.n	8003d16 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	42420060 	.word	0x42420060

08003d30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0d0      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d44:	4b6a      	ldr	r3, [pc, #424]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d910      	bls.n	8003d74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d52:	4b67      	ldr	r3, [pc, #412]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 0207 	bic.w	r2, r3, #7
 8003d5a:	4965      	ldr	r1, [pc, #404]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d62:	4b63      	ldr	r3, [pc, #396]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0b8      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d020      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d8c:	4b59      	ldr	r3, [pc, #356]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	4a58      	ldr	r2, [pc, #352]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003da4:	4b53      	ldr	r3, [pc, #332]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4a52      	ldr	r2, [pc, #328]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003daa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003dae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db0:	4b50      	ldr	r3, [pc, #320]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	494d      	ldr	r1, [pc, #308]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d040      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d115      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e07f      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d107      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dee:	4b41      	ldr	r3, [pc, #260]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e073      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfe:	4b3d      	ldr	r3, [pc, #244]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e06b      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e0e:	4b39      	ldr	r3, [pc, #228]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f023 0203 	bic.w	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4936      	ldr	r1, [pc, #216]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e20:	f7fe f888 	bl	8001f34 <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e28:	f7fe f884 	bl	8001f34 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e053      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3e:	4b2d      	ldr	r3, [pc, #180]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f003 020c 	and.w	r2, r3, #12
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d1eb      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e50:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d210      	bcs.n	8003e80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5e:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 0207 	bic.w	r2, r3, #7
 8003e66:	4922      	ldr	r1, [pc, #136]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e032      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e8c:	4b19      	ldr	r3, [pc, #100]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4916      	ldr	r1, [pc, #88]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eaa:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	490e      	ldr	r1, [pc, #56]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ebe:	f000 f821 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	490a      	ldr	r1, [pc, #40]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed0:	5ccb      	ldrb	r3, [r1, r3]
 8003ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed6:	4a09      	ldr	r2, [pc, #36]	; (8003efc <HAL_RCC_ClockConfig+0x1cc>)
 8003ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eda:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <HAL_RCC_ClockConfig+0x1d0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fd ffe6 	bl	8001eb0 <HAL_InitTick>

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40022000 	.word	0x40022000
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	08006048 	.word	0x08006048
 8003efc:	20000000 	.word	0x20000000
 8003f00:	2000001c 	.word	0x2000001c

08003f04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f04:	b490      	push	{r4, r7}
 8003f06:	b08a      	sub	sp, #40	; 0x28
 8003f08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f0a:	4b2a      	ldr	r3, [pc, #168]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f0c:	1d3c      	adds	r4, r7, #4
 8003f0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f14:	f240 2301 	movw	r3, #513	; 0x201
 8003f18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	2300      	movs	r3, #0
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f2e:	4b22      	ldr	r3, [pc, #136]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d002      	beq.n	8003f44 <HAL_RCC_GetSysClockFreq+0x40>
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d003      	beq.n	8003f4a <HAL_RCC_GetSysClockFreq+0x46>
 8003f42:	e02d      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f44:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f46:	623b      	str	r3, [r7, #32]
      break;
 8003f48:	e02d      	b.n	8003fa6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	0c9b      	lsrs	r3, r3, #18
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f56:	4413      	add	r3, r2
 8003f58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f5c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d013      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f68:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	0c5b      	lsrs	r3, r3, #17
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f76:	4413      	add	r3, r2
 8003f78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	4a0e      	ldr	r2, [pc, #56]	; (8003fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f82:	fb02 f203 	mul.w	r2, r2, r3
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8e:	e004      	b.n	8003f9a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	4a0b      	ldr	r2, [pc, #44]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f94:	fb02 f303 	mul.w	r3, r2, r3
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	623b      	str	r3, [r7, #32]
      break;
 8003f9e:	e002      	b.n	8003fa6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fa0:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fa2:	623b      	str	r3, [r7, #32]
      break;
 8003fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3728      	adds	r7, #40	; 0x28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc90      	pop	{r4, r7}
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	08006034 	.word	0x08006034
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	007a1200 	.word	0x007a1200
 8003fc0:	003d0900 	.word	0x003d0900

08003fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc8:	4b02      	ldr	r3, [pc, #8]	; (8003fd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fca:	681b      	ldr	r3, [r3, #0]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr
 8003fd4:	20000000 	.word	0x20000000

08003fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fdc:	f7ff fff2 	bl	8003fc4 <HAL_RCC_GetHCLKFreq>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	4903      	ldr	r1, [pc, #12]	; (8003ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fee:	5ccb      	ldrb	r3, [r1, r3]
 8003ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	08006058 	.word	0x08006058

08004000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004004:	f7ff ffde 	bl	8003fc4 <HAL_RCC_GetHCLKFreq>
 8004008:	4602      	mov	r2, r0
 800400a:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	0adb      	lsrs	r3, r3, #11
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	4903      	ldr	r1, [pc, #12]	; (8004024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004016:	5ccb      	ldrb	r3, [r1, r3]
 8004018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40021000 	.word	0x40021000
 8004024:	08006058 	.word	0x08006058

08004028 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <RCC_Delay+0x34>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0a      	ldr	r2, [pc, #40]	; (8004060 <RCC_Delay+0x38>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	0a5b      	lsrs	r3, r3, #9
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	fb02 f303 	mul.w	r3, r2, r3
 8004042:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004044:	bf00      	nop
  }
  while (Delay --);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1e5a      	subs	r2, r3, #1
 800404a:	60fa      	str	r2, [r7, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f9      	bne.n	8004044 <RCC_Delay+0x1c>
}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr
 800405c:	20000000 	.word	0x20000000
 8004060:	10624dd3 	.word	0x10624dd3

08004064 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d07d      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004080:	2300      	movs	r3, #0
 8004082:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004084:	4b4f      	ldr	r3, [pc, #316]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10d      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004090:	4b4c      	ldr	r3, [pc, #304]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	4a4b      	ldr	r2, [pc, #300]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409a:	61d3      	str	r3, [r2, #28]
 800409c:	4b49      	ldr	r3, [pc, #292]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040a8:	2301      	movs	r3, #1
 80040aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ac:	4b46      	ldr	r3, [pc, #280]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d118      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040b8:	4b43      	ldr	r3, [pc, #268]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a42      	ldr	r2, [pc, #264]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c4:	f7fd ff36 	bl	8001f34 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ca:	e008      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040cc:	f7fd ff32 	bl	8001f34 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	; 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e06d      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040de:	4b3a      	ldr	r3, [pc, #232]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040ea:	4b36      	ldr	r3, [pc, #216]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d02e      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	429a      	cmp	r2, r3
 8004106:	d027      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004108:	4b2e      	ldr	r3, [pc, #184]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004110:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004112:	4b2e      	ldr	r3, [pc, #184]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004114:	2201      	movs	r2, #1
 8004116:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004118:	4b2c      	ldr	r3, [pc, #176]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800411e:	4a29      	ldr	r2, [pc, #164]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d014      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412e:	f7fd ff01 	bl	8001f34 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004134:	e00a      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fd fefd 	bl	8001f34 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d901      	bls.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e036      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414c:	4b1d      	ldr	r3, [pc, #116]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0ee      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004158:	4b1a      	ldr	r3, [pc, #104]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4917      	ldr	r1, [pc, #92]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004166:	4313      	orrs	r3, r2
 8004168:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800416a:	7dfb      	ldrb	r3, [r7, #23]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d105      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	4a13      	ldr	r2, [pc, #76]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800417a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004188:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	490b      	ldr	r1, [pc, #44]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004196:	4313      	orrs	r3, r2
 8004198:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0310 	and.w	r3, r3, #16
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d008      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041a6:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	4904      	ldr	r1, [pc, #16]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40007000 	.word	0x40007000
 80041cc:	42420440 	.word	0x42420440

080041d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e076      	b.n	80042d0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d108      	bne.n	80041fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041f2:	d009      	beq.n	8004208 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	61da      	str	r2, [r3, #28]
 80041fa:	e005      	b.n	8004208 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fc ff64 	bl	80010f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800423e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428c:	ea42 0103 	orr.w	r1, r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004294:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	0c1a      	lsrs	r2, r3, #16
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f002 0204 	and.w	r2, r2, #4
 80042ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69da      	ldr	r2, [r3, #28]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	4613      	mov	r3, r2
 80042e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_SPI_Transmit+0x22>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e126      	b.n	8004548 <HAL_SPI_Transmit+0x270>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004302:	f7fd fe17 	bl	8001f34 <HAL_GetTick>
 8004306:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004308:	88fb      	ldrh	r3, [r7, #6]
 800430a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b01      	cmp	r3, #1
 8004316:	d002      	beq.n	800431e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004318:	2302      	movs	r3, #2
 800431a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800431c:	e10b      	b.n	8004536 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <HAL_SPI_Transmit+0x52>
 8004324:	88fb      	ldrh	r3, [r7, #6]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d102      	bne.n	8004330 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800432e:	e102      	b.n	8004536 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2203      	movs	r2, #3
 8004334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	88fa      	ldrh	r2, [r7, #6]
 8004348:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	88fa      	ldrh	r2, [r7, #6]
 800434e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004376:	d10f      	bne.n	8004398 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004386:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004396:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a2:	2b40      	cmp	r3, #64	; 0x40
 80043a4:	d007      	beq.n	80043b6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043be:	d14b      	bne.n	8004458 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_SPI_Transmit+0xf6>
 80043c8:	8afb      	ldrh	r3, [r7, #22]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d13e      	bne.n	800444c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	881a      	ldrh	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	1c9a      	adds	r2, r3, #2
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043f2:	e02b      	b.n	800444c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d112      	bne.n	8004428 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	881a      	ldrh	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	1c9a      	adds	r2, r3, #2
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	86da      	strh	r2, [r3, #54]	; 0x36
 8004426:	e011      	b.n	800444c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004428:	f7fd fd84 	bl	8001f34 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d803      	bhi.n	8004440 <HAL_SPI_Transmit+0x168>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443e:	d102      	bne.n	8004446 <HAL_SPI_Transmit+0x16e>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	77fb      	strb	r3, [r7, #31]
          goto error;
 800444a:	e074      	b.n	8004536 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1ce      	bne.n	80043f4 <HAL_SPI_Transmit+0x11c>
 8004456:	e04c      	b.n	80044f2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_SPI_Transmit+0x18e>
 8004460:	8afb      	ldrh	r3, [r7, #22]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d140      	bne.n	80044e8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	330c      	adds	r3, #12
 8004470:	7812      	ldrb	r2, [r2, #0]
 8004472:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800448c:	e02c      	b.n	80044e8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b02      	cmp	r3, #2
 800449a:	d113      	bne.n	80044c4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	7812      	ldrb	r2, [r2, #0]
 80044a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80044c2:	e011      	b.n	80044e8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044c4:	f7fd fd36 	bl	8001f34 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d803      	bhi.n	80044dc <HAL_SPI_Transmit+0x204>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044da:	d102      	bne.n	80044e2 <HAL_SPI_Transmit+0x20a>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d102      	bne.n	80044e8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044e6:	e026      	b.n	8004536 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1cd      	bne.n	800448e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	6839      	ldr	r1, [r7, #0]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f8b2 	bl	8004660 <SPI_EndRxTxTransaction>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2220      	movs	r2, #32
 8004506:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10a      	bne.n	8004526 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	77fb      	strb	r3, [r7, #31]
 8004532:	e000      	b.n	8004536 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004534:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004546:	7ffb      	ldrb	r3, [r7, #31]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3720      	adds	r7, #32
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004560:	f7fd fce8 	bl	8001f34 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	4413      	add	r3, r2
 800456e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004570:	f7fd fce0 	bl	8001f34 <HAL_GetTick>
 8004574:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004576:	4b39      	ldr	r3, [pc, #228]	; (800465c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	015b      	lsls	r3, r3, #5
 800457c:	0d1b      	lsrs	r3, r3, #20
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	fb02 f303 	mul.w	r3, r2, r3
 8004584:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004586:	e054      	b.n	8004632 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458e:	d050      	beq.n	8004632 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004590:	f7fd fcd0 	bl	8001f34 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	69fa      	ldr	r2, [r7, #28]
 800459c:	429a      	cmp	r2, r3
 800459e:	d902      	bls.n	80045a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d13d      	bne.n	8004622 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045be:	d111      	bne.n	80045e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c8:	d004      	beq.n	80045d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d2:	d107      	bne.n	80045e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ec:	d10f      	bne.n	800460e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800460c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e017      	b.n	8004652 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	3b01      	subs	r3, #1
 8004630:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4013      	ands	r3, r2
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	429a      	cmp	r2, r3
 8004640:	bf0c      	ite	eq
 8004642:	2301      	moveq	r3, #1
 8004644:	2300      	movne	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	429a      	cmp	r2, r3
 800464e:	d19b      	bne.n	8004588 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3720      	adds	r7, #32
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000000 	.word	0x20000000

08004660 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af02      	add	r7, sp, #8
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2200      	movs	r2, #0
 8004674:	2180      	movs	r1, #128	; 0x80
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f7ff ff6a 	bl	8004550 <SPI_WaitFlagStateUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004686:	f043 0220 	orr.w	r2, r3, #32
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e000      	b.n	8004694 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e041      	b.n	8004732 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fc fdee 	bl	80012a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4619      	mov	r1, r3
 80046da:	4610      	mov	r0, r2
 80046dc:	f000 fa7a 	bl	8004bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	d001      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e03a      	b.n	80047ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a18      	ldr	r2, [pc, #96]	; (80047d4 <HAL_TIM_Base_Start_IT+0x98>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00e      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x58>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477e:	d009      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x58>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a14      	ldr	r2, [pc, #80]	; (80047d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x58>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a13      	ldr	r2, [pc, #76]	; (80047dc <HAL_TIM_Base_Start_IT+0xa0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d111      	bne.n	80047b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b06      	cmp	r3, #6
 80047a4:	d010      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0201 	orr.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b6:	e007      	b.n	80047c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr
 80047d4:	40012c00 	.word	0x40012c00
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800

080047e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d122      	bne.n	800483c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b02      	cmp	r3, #2
 8004802:	d11b      	bne.n	800483c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0202 	mvn.w	r2, #2
 800480c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f9ba 	bl	8004b9c <HAL_TIM_IC_CaptureCallback>
 8004828:	e005      	b.n	8004836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f9ad 	bl	8004b8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f9bc 	bl	8004bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b04      	cmp	r3, #4
 8004848:	d122      	bne.n	8004890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b04      	cmp	r3, #4
 8004856:	d11b      	bne.n	8004890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0204 	mvn.w	r2, #4
 8004860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f990 	bl	8004b9c <HAL_TIM_IC_CaptureCallback>
 800487c:	e005      	b.n	800488a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f983 	bl	8004b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f992 	bl	8004bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b08      	cmp	r3, #8
 800489c:	d122      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d11b      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f06f 0208 	mvn.w	r2, #8
 80048b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2204      	movs	r2, #4
 80048ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f966 	bl	8004b9c <HAL_TIM_IC_CaptureCallback>
 80048d0:	e005      	b.n	80048de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f959 	bl	8004b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f968 	bl	8004bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	2b10      	cmp	r3, #16
 80048f0:	d122      	bne.n	8004938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b10      	cmp	r3, #16
 80048fe:	d11b      	bne.n	8004938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0210 	mvn.w	r2, #16
 8004908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2208      	movs	r2, #8
 800490e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f93c 	bl	8004b9c <HAL_TIM_IC_CaptureCallback>
 8004924:	e005      	b.n	8004932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f92f 	bl	8004b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f93e 	bl	8004bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b01      	cmp	r3, #1
 8004944:	d10e      	bne.n	8004964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b01      	cmp	r3, #1
 8004952:	d107      	bne.n	8004964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0201 	mvn.w	r2, #1
 800495c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f90a 	bl	8004b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496e:	2b80      	cmp	r3, #128	; 0x80
 8004970:	d10e      	bne.n	8004990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497c:	2b80      	cmp	r3, #128	; 0x80
 800497e:	d107      	bne.n	8004990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fa81 	bl	8004e92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d10e      	bne.n	80049bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a8:	2b40      	cmp	r3, #64	; 0x40
 80049aa:	d107      	bne.n	80049bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f902 	bl	8004bc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d10e      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d107      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0220 	mvn.w	r2, #32
 80049e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fa4c 	bl	8004e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049e8:	bf00      	nop
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_TIM_ConfigClockSource+0x18>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e0b3      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x180>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a40:	d03e      	beq.n	8004ac0 <HAL_TIM_ConfigClockSource+0xd0>
 8004a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a46:	f200 8087 	bhi.w	8004b58 <HAL_TIM_ConfigClockSource+0x168>
 8004a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4e:	f000 8085 	beq.w	8004b5c <HAL_TIM_ConfigClockSource+0x16c>
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a56:	d87f      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x168>
 8004a58:	2b70      	cmp	r3, #112	; 0x70
 8004a5a:	d01a      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0xa2>
 8004a5c:	2b70      	cmp	r3, #112	; 0x70
 8004a5e:	d87b      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x168>
 8004a60:	2b60      	cmp	r3, #96	; 0x60
 8004a62:	d050      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0x116>
 8004a64:	2b60      	cmp	r3, #96	; 0x60
 8004a66:	d877      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x168>
 8004a68:	2b50      	cmp	r3, #80	; 0x50
 8004a6a:	d03c      	beq.n	8004ae6 <HAL_TIM_ConfigClockSource+0xf6>
 8004a6c:	2b50      	cmp	r3, #80	; 0x50
 8004a6e:	d873      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x168>
 8004a70:	2b40      	cmp	r3, #64	; 0x40
 8004a72:	d058      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x136>
 8004a74:	2b40      	cmp	r3, #64	; 0x40
 8004a76:	d86f      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x168>
 8004a78:	2b30      	cmp	r3, #48	; 0x30
 8004a7a:	d064      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x156>
 8004a7c:	2b30      	cmp	r3, #48	; 0x30
 8004a7e:	d86b      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x168>
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	d060      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x156>
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	d867      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x168>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d05c      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x156>
 8004a8c:	2b10      	cmp	r3, #16
 8004a8e:	d05a      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a90:	e062      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	6899      	ldr	r1, [r3, #8]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f000 f970 	bl	8004d86 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ab4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	609a      	str	r2, [r3, #8]
      break;
 8004abe:	e04e      	b.n	8004b5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	6899      	ldr	r1, [r3, #8]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f000 f959 	bl	8004d86 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ae2:	609a      	str	r2, [r3, #8]
      break;
 8004ae4:	e03b      	b.n	8004b5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6859      	ldr	r1, [r3, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f000 f8d0 	bl	8004c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2150      	movs	r1, #80	; 0x50
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 f927 	bl	8004d52 <TIM_ITRx_SetConfig>
      break;
 8004b04:	e02b      	b.n	8004b5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6859      	ldr	r1, [r3, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f000 f8ee 	bl	8004cf4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2160      	movs	r1, #96	; 0x60
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 f917 	bl	8004d52 <TIM_ITRx_SetConfig>
      break;
 8004b24:	e01b      	b.n	8004b5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6859      	ldr	r1, [r3, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	461a      	mov	r2, r3
 8004b34:	f000 f8b0 	bl	8004c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2140      	movs	r1, #64	; 0x40
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 f907 	bl	8004d52 <TIM_ITRx_SetConfig>
      break;
 8004b44:	e00b      	b.n	8004b5e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4610      	mov	r0, r2
 8004b52:	f000 f8fe 	bl	8004d52 <TIM_ITRx_SetConfig>
        break;
 8004b56:	e002      	b.n	8004b5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b58:	bf00      	nop
 8004b5a:	e000      	b.n	8004b5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	4770      	bx	lr

08004b8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr

08004b9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr

08004bae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bc80      	pop	{r7}
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr
	...

08004bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a29      	ldr	r2, [pc, #164]	; (8004c8c <TIM_Base_SetConfig+0xb8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00b      	beq.n	8004c04 <TIM_Base_SetConfig+0x30>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf2:	d007      	beq.n	8004c04 <TIM_Base_SetConfig+0x30>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a26      	ldr	r2, [pc, #152]	; (8004c90 <TIM_Base_SetConfig+0xbc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_Base_SetConfig+0x30>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a25      	ldr	r2, [pc, #148]	; (8004c94 <TIM_Base_SetConfig+0xc0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d108      	bne.n	8004c16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a1c      	ldr	r2, [pc, #112]	; (8004c8c <TIM_Base_SetConfig+0xb8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00b      	beq.n	8004c36 <TIM_Base_SetConfig+0x62>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c24:	d007      	beq.n	8004c36 <TIM_Base_SetConfig+0x62>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a19      	ldr	r2, [pc, #100]	; (8004c90 <TIM_Base_SetConfig+0xbc>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d003      	beq.n	8004c36 <TIM_Base_SetConfig+0x62>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a18      	ldr	r2, [pc, #96]	; (8004c94 <TIM_Base_SetConfig+0xc0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d108      	bne.n	8004c48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a07      	ldr	r2, [pc, #28]	; (8004c8c <TIM_Base_SetConfig+0xb8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d103      	bne.n	8004c7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	691a      	ldr	r2, [r3, #16]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	615a      	str	r2, [r3, #20]
}
 8004c82:	bf00      	nop
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40000800 	.word	0x40000800

08004c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f023 0201 	bic.w	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f023 030a 	bic.w	r3, r3, #10
 8004cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	621a      	str	r2, [r3, #32]
}
 8004cea:	bf00      	nop
 8004cec:	371c      	adds	r7, #28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	f023 0210 	bic.w	r2, r3, #16
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	031b      	lsls	r3, r3, #12
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	621a      	str	r2, [r3, #32]
}
 8004d48:	bf00      	nop
 8004d4a:	371c      	adds	r7, #28
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr

08004d52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b085      	sub	sp, #20
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f043 0307 	orr.w	r3, r3, #7
 8004d74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	609a      	str	r2, [r3, #8]
}
 8004d7c:	bf00      	nop
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr

08004d86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b087      	sub	sp, #28
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	021a      	lsls	r2, r3, #8
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	431a      	orrs	r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	609a      	str	r2, [r3, #8]
}
 8004dba:	bf00      	nop
 8004dbc:	371c      	adds	r7, #28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e046      	b.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a16      	ldr	r2, [pc, #88]	; (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00e      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e28:	d009      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a12      	ldr	r2, [pc, #72]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a10      	ldr	r2, [pc, #64]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d10c      	bne.n	8004e58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bc80      	pop	{r7}
 8004e72:	4770      	bx	lr
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800

08004e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr

08004e92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e03f      	b.n	8004f36 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fc fa22 	bl	8001314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2224      	movs	r2, #36	; 0x24
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fb49 	bl	8005580 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695a      	ldr	r2, [r3, #20]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08a      	sub	sp, #40	; 0x28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10d      	bne.n	8004f92 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d008      	beq.n	8004f92 <HAL_UART_IRQHandler+0x52>
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fa4f 	bl	800542e <UART_Receive_IT>
      return;
 8004f90:	e17b      	b.n	800528a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80b1 	beq.w	80050fc <HAL_UART_IRQHandler+0x1bc>
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <HAL_UART_IRQHandler+0x70>
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 80a6 	beq.w	80050fc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x90>
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	f043 0201 	orr.w	r2, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_UART_IRQHandler+0xb0>
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d005      	beq.n	8004ff0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	f043 0202 	orr.w	r2, r3, #2
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <HAL_UART_IRQHandler+0xd0>
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	d005      	beq.n	8005010 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	f043 0204 	orr.w	r2, r3, #4
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00f      	beq.n	800503a <HAL_UART_IRQHandler+0xfa>
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d104      	bne.n	800502e <HAL_UART_IRQHandler+0xee>
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f043 0208 	orr.w	r2, r3, #8
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 811e 	beq.w	8005280 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b00      	cmp	r3, #0
 800504c:	d007      	beq.n	800505e <HAL_UART_IRQHandler+0x11e>
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f9e8 	bl	800542e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005068:	2b00      	cmp	r3, #0
 800506a:	bf14      	ite	ne
 800506c:	2301      	movne	r3, #1
 800506e:	2300      	moveq	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	2b00      	cmp	r3, #0
 800507e:	d102      	bne.n	8005086 <HAL_UART_IRQHandler+0x146>
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d031      	beq.n	80050ea <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f92a 	bl	80052e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d023      	beq.n	80050e2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695a      	ldr	r2, [r3, #20]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d013      	beq.n	80050da <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	4a76      	ldr	r2, [pc, #472]	; (8005290 <HAL_UART_IRQHandler+0x350>)
 80050b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe f884 	bl	80031cc <HAL_DMA_Abort_IT>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d016      	beq.n	80050f8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050d4:	4610      	mov	r0, r2
 80050d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d8:	e00e      	b.n	80050f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f8ec 	bl	80052b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e0:	e00a      	b.n	80050f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f8e8 	bl	80052b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e8:	e006      	b.n	80050f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f8e4 	bl	80052b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80050f6:	e0c3      	b.n	8005280 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	bf00      	nop
    return;
 80050fa:	e0c1      	b.n	8005280 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	2b01      	cmp	r3, #1
 8005102:	f040 80a1 	bne.w	8005248 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 809b 	beq.w	8005248 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 8095 	beq.w	8005248 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d04e      	beq.n	80051e0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800514c:	8a3b      	ldrh	r3, [r7, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 8098 	beq.w	8005284 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005158:	8a3a      	ldrh	r2, [r7, #16]
 800515a:	429a      	cmp	r2, r3
 800515c:	f080 8092 	bcs.w	8005284 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	8a3a      	ldrh	r2, [r7, #16]
 8005164:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	2b20      	cmp	r3, #32
 800516e:	d02b      	beq.n	80051c8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800517e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695a      	ldr	r2, [r3, #20]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0201 	bic.w	r2, r2, #1
 800518e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695a      	ldr	r2, [r3, #20]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800519e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0210 	bic.w	r2, r2, #16
 80051bc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fd ffc8 	bl	8003158 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	4619      	mov	r1, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f876 	bl	80052ca <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80051de:	e051      	b.n	8005284 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d047      	beq.n	8005288 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80051f8:	8a7b      	ldrh	r3, [r7, #18]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d044      	beq.n	8005288 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800520c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695a      	ldr	r2, [r3, #20]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0201 	bic.w	r2, r2, #1
 800521c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0210 	bic.w	r2, r2, #16
 800523a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800523c:	8a7b      	ldrh	r3, [r7, #18]
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f842 	bl	80052ca <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005246:	e01f      	b.n	8005288 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524e:	2b00      	cmp	r3, #0
 8005250:	d008      	beq.n	8005264 <HAL_UART_IRQHandler+0x324>
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f87f 	bl	8005360 <UART_Transmit_IT>
    return;
 8005262:	e012      	b.n	800528a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00d      	beq.n	800528a <HAL_UART_IRQHandler+0x34a>
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f8c0 	bl	80053fe <UART_EndTransmit_IT>
    return;
 800527e:	e004      	b.n	800528a <HAL_UART_IRQHandler+0x34a>
    return;
 8005280:	bf00      	nop
 8005282:	e002      	b.n	800528a <HAL_UART_IRQHandler+0x34a>
      return;
 8005284:	bf00      	nop
 8005286:	e000      	b.n	800528a <HAL_UART_IRQHandler+0x34a>
      return;
 8005288:	bf00      	nop
  }
}
 800528a:	3728      	adds	r7, #40	; 0x28
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	08005339 	.word	0x08005339

08005294 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr

080052a6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr

080052b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bc80      	pop	{r7}
 80052c8:	4770      	bx	lr

080052ca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	460b      	mov	r3, r1
 80052d4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr

080052e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695a      	ldr	r2, [r3, #20]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530c:	2b01      	cmp	r3, #1
 800530e:	d107      	bne.n	8005320 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0210 	bic.w	r2, r2, #16
 800531e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2220      	movs	r2, #32
 8005324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr

08005338 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f7ff ffb0 	bl	80052b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b21      	cmp	r3, #33	; 0x21
 8005372:	d13e      	bne.n	80053f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537c:	d114      	bne.n	80053a8 <UART_Transmit_IT+0x48>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d110      	bne.n	80053a8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800539a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	1c9a      	adds	r2, r3, #2
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	621a      	str	r2, [r3, #32]
 80053a6:	e008      	b.n	80053ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	1c59      	adds	r1, r3, #1
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6211      	str	r1, [r2, #32]
 80053b2:	781a      	ldrb	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	4619      	mov	r1, r3
 80053c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10f      	bne.n	80053ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e000      	b.n	80053f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053f2:	2302      	movs	r3, #2
  }
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr

080053fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005414:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2220      	movs	r2, #32
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff ff38 	bl	8005294 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b086      	sub	sp, #24
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b22      	cmp	r3, #34	; 0x22
 8005440:	f040 8099 	bne.w	8005576 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544c:	d117      	bne.n	800547e <UART_Receive_IT+0x50>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d113      	bne.n	800547e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	b29b      	uxth	r3, r3
 8005468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546c:	b29a      	uxth	r2, r3
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005476:	1c9a      	adds	r2, r3, #2
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	629a      	str	r2, [r3, #40]	; 0x28
 800547c:	e026      	b.n	80054cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005484:	2300      	movs	r3, #0
 8005486:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005490:	d007      	beq.n	80054a2 <UART_Receive_IT+0x74>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10a      	bne.n	80054b0 <UART_Receive_IT+0x82>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	e008      	b.n	80054c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	4619      	mov	r1, r3
 80054da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d148      	bne.n	8005572 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0220 	bic.w	r2, r2, #32
 80054ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695a      	ldr	r2, [r3, #20]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0201 	bic.w	r2, r2, #1
 800550e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	2b01      	cmp	r3, #1
 800551e:	d123      	bne.n	8005568 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0210 	bic.w	r2, r2, #16
 8005534:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b10      	cmp	r3, #16
 8005542:	d10a      	bne.n	800555a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800555e:	4619      	mov	r1, r3
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff feb2 	bl	80052ca <HAL_UARTEx_RxEventCallback>
 8005566:	e002      	b.n	800556e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff fe9c 	bl	80052a6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	e002      	b.n	8005578 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	e000      	b.n	8005578 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005576:	2302      	movs	r3, #2
  }
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80055ba:	f023 030c 	bic.w	r3, r3, #12
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6812      	ldr	r2, [r2, #0]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	430b      	orrs	r3, r1
 80055c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a2c      	ldr	r2, [pc, #176]	; (8005694 <UART_SetConfig+0x114>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d103      	bne.n	80055f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055e8:	f7fe fd0a 	bl	8004000 <HAL_RCC_GetPCLK2Freq>
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	e002      	b.n	80055f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055f0:	f7fe fcf2 	bl	8003fd8 <HAL_RCC_GetPCLK1Freq>
 80055f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	009a      	lsls	r2, r3, #2
 8005600:	441a      	add	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	fbb2 f3f3 	udiv	r3, r2, r3
 800560c:	4a22      	ldr	r2, [pc, #136]	; (8005698 <UART_SetConfig+0x118>)
 800560e:	fba2 2303 	umull	r2, r3, r2, r3
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	0119      	lsls	r1, r3, #4
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	009a      	lsls	r2, r3, #2
 8005620:	441a      	add	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	fbb2 f2f3 	udiv	r2, r2, r3
 800562c:	4b1a      	ldr	r3, [pc, #104]	; (8005698 <UART_SetConfig+0x118>)
 800562e:	fba3 0302 	umull	r0, r3, r3, r2
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	2064      	movs	r0, #100	; 0x64
 8005636:	fb00 f303 	mul.w	r3, r0, r3
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	3332      	adds	r3, #50	; 0x32
 8005640:	4a15      	ldr	r2, [pc, #84]	; (8005698 <UART_SetConfig+0x118>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800564c:	4419      	add	r1, r3
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	009a      	lsls	r2, r3, #2
 8005658:	441a      	add	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	fbb2 f2f3 	udiv	r2, r2, r3
 8005664:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <UART_SetConfig+0x118>)
 8005666:	fba3 0302 	umull	r0, r3, r3, r2
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	2064      	movs	r0, #100	; 0x64
 800566e:	fb00 f303 	mul.w	r3, r0, r3
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	3332      	adds	r3, #50	; 0x32
 8005678:	4a07      	ldr	r2, [pc, #28]	; (8005698 <UART_SetConfig+0x118>)
 800567a:	fba2 2303 	umull	r2, r3, r2, r3
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	f003 020f 	and.w	r2, r3, #15
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	440a      	add	r2, r1
 800568a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40013800 	.word	0x40013800
 8005698:	51eb851f 	.word	0x51eb851f

0800569c <__errno>:
 800569c:	4b01      	ldr	r3, [pc, #4]	; (80056a4 <__errno+0x8>)
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000024 	.word	0x20000024

080056a8 <__libc_init_array>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	2600      	movs	r6, #0
 80056ac:	4d0c      	ldr	r5, [pc, #48]	; (80056e0 <__libc_init_array+0x38>)
 80056ae:	4c0d      	ldr	r4, [pc, #52]	; (80056e4 <__libc_init_array+0x3c>)
 80056b0:	1b64      	subs	r4, r4, r5
 80056b2:	10a4      	asrs	r4, r4, #2
 80056b4:	42a6      	cmp	r6, r4
 80056b6:	d109      	bne.n	80056cc <__libc_init_array+0x24>
 80056b8:	f000 fc70 	bl	8005f9c <_init>
 80056bc:	2600      	movs	r6, #0
 80056be:	4d0a      	ldr	r5, [pc, #40]	; (80056e8 <__libc_init_array+0x40>)
 80056c0:	4c0a      	ldr	r4, [pc, #40]	; (80056ec <__libc_init_array+0x44>)
 80056c2:	1b64      	subs	r4, r4, r5
 80056c4:	10a4      	asrs	r4, r4, #2
 80056c6:	42a6      	cmp	r6, r4
 80056c8:	d105      	bne.n	80056d6 <__libc_init_array+0x2e>
 80056ca:	bd70      	pop	{r4, r5, r6, pc}
 80056cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d0:	4798      	blx	r3
 80056d2:	3601      	adds	r6, #1
 80056d4:	e7ee      	b.n	80056b4 <__libc_init_array+0xc>
 80056d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056da:	4798      	blx	r3
 80056dc:	3601      	adds	r6, #1
 80056de:	e7f2      	b.n	80056c6 <__libc_init_array+0x1e>
 80056e0:	080060b0 	.word	0x080060b0
 80056e4:	080060b0 	.word	0x080060b0
 80056e8:	080060b0 	.word	0x080060b0
 80056ec:	080060b4 	.word	0x080060b4

080056f0 <memset>:
 80056f0:	4603      	mov	r3, r0
 80056f2:	4402      	add	r2, r0
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d100      	bne.n	80056fa <memset+0xa>
 80056f8:	4770      	bx	lr
 80056fa:	f803 1b01 	strb.w	r1, [r3], #1
 80056fe:	e7f9      	b.n	80056f4 <memset+0x4>

08005700 <sniprintf>:
 8005700:	b40c      	push	{r2, r3}
 8005702:	b530      	push	{r4, r5, lr}
 8005704:	4b17      	ldr	r3, [pc, #92]	; (8005764 <sniprintf+0x64>)
 8005706:	1e0c      	subs	r4, r1, #0
 8005708:	681d      	ldr	r5, [r3, #0]
 800570a:	b09d      	sub	sp, #116	; 0x74
 800570c:	da08      	bge.n	8005720 <sniprintf+0x20>
 800570e:	238b      	movs	r3, #139	; 0x8b
 8005710:	f04f 30ff 	mov.w	r0, #4294967295
 8005714:	602b      	str	r3, [r5, #0]
 8005716:	b01d      	add	sp, #116	; 0x74
 8005718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800571c:	b002      	add	sp, #8
 800571e:	4770      	bx	lr
 8005720:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005724:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005728:	bf0c      	ite	eq
 800572a:	4623      	moveq	r3, r4
 800572c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005730:	9304      	str	r3, [sp, #16]
 8005732:	9307      	str	r3, [sp, #28]
 8005734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005738:	9002      	str	r0, [sp, #8]
 800573a:	9006      	str	r0, [sp, #24]
 800573c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005740:	4628      	mov	r0, r5
 8005742:	ab21      	add	r3, sp, #132	; 0x84
 8005744:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005746:	a902      	add	r1, sp, #8
 8005748:	9301      	str	r3, [sp, #4]
 800574a:	f000 f869 	bl	8005820 <_svfiprintf_r>
 800574e:	1c43      	adds	r3, r0, #1
 8005750:	bfbc      	itt	lt
 8005752:	238b      	movlt	r3, #139	; 0x8b
 8005754:	602b      	strlt	r3, [r5, #0]
 8005756:	2c00      	cmp	r4, #0
 8005758:	d0dd      	beq.n	8005716 <sniprintf+0x16>
 800575a:	2200      	movs	r2, #0
 800575c:	9b02      	ldr	r3, [sp, #8]
 800575e:	701a      	strb	r2, [r3, #0]
 8005760:	e7d9      	b.n	8005716 <sniprintf+0x16>
 8005762:	bf00      	nop
 8005764:	20000024 	.word	0x20000024

08005768 <__ssputs_r>:
 8005768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800576c:	688e      	ldr	r6, [r1, #8]
 800576e:	4682      	mov	sl, r0
 8005770:	429e      	cmp	r6, r3
 8005772:	460c      	mov	r4, r1
 8005774:	4690      	mov	r8, r2
 8005776:	461f      	mov	r7, r3
 8005778:	d838      	bhi.n	80057ec <__ssputs_r+0x84>
 800577a:	898a      	ldrh	r2, [r1, #12]
 800577c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005780:	d032      	beq.n	80057e8 <__ssputs_r+0x80>
 8005782:	6825      	ldr	r5, [r4, #0]
 8005784:	6909      	ldr	r1, [r1, #16]
 8005786:	3301      	adds	r3, #1
 8005788:	eba5 0901 	sub.w	r9, r5, r1
 800578c:	6965      	ldr	r5, [r4, #20]
 800578e:	444b      	add	r3, r9
 8005790:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005794:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005798:	106d      	asrs	r5, r5, #1
 800579a:	429d      	cmp	r5, r3
 800579c:	bf38      	it	cc
 800579e:	461d      	movcc	r5, r3
 80057a0:	0553      	lsls	r3, r2, #21
 80057a2:	d531      	bpl.n	8005808 <__ssputs_r+0xa0>
 80057a4:	4629      	mov	r1, r5
 80057a6:	f000 fb53 	bl	8005e50 <_malloc_r>
 80057aa:	4606      	mov	r6, r0
 80057ac:	b950      	cbnz	r0, 80057c4 <__ssputs_r+0x5c>
 80057ae:	230c      	movs	r3, #12
 80057b0:	f04f 30ff 	mov.w	r0, #4294967295
 80057b4:	f8ca 3000 	str.w	r3, [sl]
 80057b8:	89a3      	ldrh	r3, [r4, #12]
 80057ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057be:	81a3      	strh	r3, [r4, #12]
 80057c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c4:	464a      	mov	r2, r9
 80057c6:	6921      	ldr	r1, [r4, #16]
 80057c8:	f000 face 	bl	8005d68 <memcpy>
 80057cc:	89a3      	ldrh	r3, [r4, #12]
 80057ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d6:	81a3      	strh	r3, [r4, #12]
 80057d8:	6126      	str	r6, [r4, #16]
 80057da:	444e      	add	r6, r9
 80057dc:	6026      	str	r6, [r4, #0]
 80057de:	463e      	mov	r6, r7
 80057e0:	6165      	str	r5, [r4, #20]
 80057e2:	eba5 0509 	sub.w	r5, r5, r9
 80057e6:	60a5      	str	r5, [r4, #8]
 80057e8:	42be      	cmp	r6, r7
 80057ea:	d900      	bls.n	80057ee <__ssputs_r+0x86>
 80057ec:	463e      	mov	r6, r7
 80057ee:	4632      	mov	r2, r6
 80057f0:	4641      	mov	r1, r8
 80057f2:	6820      	ldr	r0, [r4, #0]
 80057f4:	f000 fac6 	bl	8005d84 <memmove>
 80057f8:	68a3      	ldr	r3, [r4, #8]
 80057fa:	6822      	ldr	r2, [r4, #0]
 80057fc:	1b9b      	subs	r3, r3, r6
 80057fe:	4432      	add	r2, r6
 8005800:	2000      	movs	r0, #0
 8005802:	60a3      	str	r3, [r4, #8]
 8005804:	6022      	str	r2, [r4, #0]
 8005806:	e7db      	b.n	80057c0 <__ssputs_r+0x58>
 8005808:	462a      	mov	r2, r5
 800580a:	f000 fb7b 	bl	8005f04 <_realloc_r>
 800580e:	4606      	mov	r6, r0
 8005810:	2800      	cmp	r0, #0
 8005812:	d1e1      	bne.n	80057d8 <__ssputs_r+0x70>
 8005814:	4650      	mov	r0, sl
 8005816:	6921      	ldr	r1, [r4, #16]
 8005818:	f000 face 	bl	8005db8 <_free_r>
 800581c:	e7c7      	b.n	80057ae <__ssputs_r+0x46>
	...

08005820 <_svfiprintf_r>:
 8005820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005824:	4698      	mov	r8, r3
 8005826:	898b      	ldrh	r3, [r1, #12]
 8005828:	4607      	mov	r7, r0
 800582a:	061b      	lsls	r3, r3, #24
 800582c:	460d      	mov	r5, r1
 800582e:	4614      	mov	r4, r2
 8005830:	b09d      	sub	sp, #116	; 0x74
 8005832:	d50e      	bpl.n	8005852 <_svfiprintf_r+0x32>
 8005834:	690b      	ldr	r3, [r1, #16]
 8005836:	b963      	cbnz	r3, 8005852 <_svfiprintf_r+0x32>
 8005838:	2140      	movs	r1, #64	; 0x40
 800583a:	f000 fb09 	bl	8005e50 <_malloc_r>
 800583e:	6028      	str	r0, [r5, #0]
 8005840:	6128      	str	r0, [r5, #16]
 8005842:	b920      	cbnz	r0, 800584e <_svfiprintf_r+0x2e>
 8005844:	230c      	movs	r3, #12
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	f04f 30ff 	mov.w	r0, #4294967295
 800584c:	e0d1      	b.n	80059f2 <_svfiprintf_r+0x1d2>
 800584e:	2340      	movs	r3, #64	; 0x40
 8005850:	616b      	str	r3, [r5, #20]
 8005852:	2300      	movs	r3, #0
 8005854:	9309      	str	r3, [sp, #36]	; 0x24
 8005856:	2320      	movs	r3, #32
 8005858:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800585c:	2330      	movs	r3, #48	; 0x30
 800585e:	f04f 0901 	mov.w	r9, #1
 8005862:	f8cd 800c 	str.w	r8, [sp, #12]
 8005866:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a0c <_svfiprintf_r+0x1ec>
 800586a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800586e:	4623      	mov	r3, r4
 8005870:	469a      	mov	sl, r3
 8005872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005876:	b10a      	cbz	r2, 800587c <_svfiprintf_r+0x5c>
 8005878:	2a25      	cmp	r2, #37	; 0x25
 800587a:	d1f9      	bne.n	8005870 <_svfiprintf_r+0x50>
 800587c:	ebba 0b04 	subs.w	fp, sl, r4
 8005880:	d00b      	beq.n	800589a <_svfiprintf_r+0x7a>
 8005882:	465b      	mov	r3, fp
 8005884:	4622      	mov	r2, r4
 8005886:	4629      	mov	r1, r5
 8005888:	4638      	mov	r0, r7
 800588a:	f7ff ff6d 	bl	8005768 <__ssputs_r>
 800588e:	3001      	adds	r0, #1
 8005890:	f000 80aa 	beq.w	80059e8 <_svfiprintf_r+0x1c8>
 8005894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005896:	445a      	add	r2, fp
 8005898:	9209      	str	r2, [sp, #36]	; 0x24
 800589a:	f89a 3000 	ldrb.w	r3, [sl]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 80a2 	beq.w	80059e8 <_svfiprintf_r+0x1c8>
 80058a4:	2300      	movs	r3, #0
 80058a6:	f04f 32ff 	mov.w	r2, #4294967295
 80058aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058ae:	f10a 0a01 	add.w	sl, sl, #1
 80058b2:	9304      	str	r3, [sp, #16]
 80058b4:	9307      	str	r3, [sp, #28]
 80058b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058ba:	931a      	str	r3, [sp, #104]	; 0x68
 80058bc:	4654      	mov	r4, sl
 80058be:	2205      	movs	r2, #5
 80058c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058c4:	4851      	ldr	r0, [pc, #324]	; (8005a0c <_svfiprintf_r+0x1ec>)
 80058c6:	f000 fa41 	bl	8005d4c <memchr>
 80058ca:	9a04      	ldr	r2, [sp, #16]
 80058cc:	b9d8      	cbnz	r0, 8005906 <_svfiprintf_r+0xe6>
 80058ce:	06d0      	lsls	r0, r2, #27
 80058d0:	bf44      	itt	mi
 80058d2:	2320      	movmi	r3, #32
 80058d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058d8:	0711      	lsls	r1, r2, #28
 80058da:	bf44      	itt	mi
 80058dc:	232b      	movmi	r3, #43	; 0x2b
 80058de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058e2:	f89a 3000 	ldrb.w	r3, [sl]
 80058e6:	2b2a      	cmp	r3, #42	; 0x2a
 80058e8:	d015      	beq.n	8005916 <_svfiprintf_r+0xf6>
 80058ea:	4654      	mov	r4, sl
 80058ec:	2000      	movs	r0, #0
 80058ee:	f04f 0c0a 	mov.w	ip, #10
 80058f2:	9a07      	ldr	r2, [sp, #28]
 80058f4:	4621      	mov	r1, r4
 80058f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058fa:	3b30      	subs	r3, #48	; 0x30
 80058fc:	2b09      	cmp	r3, #9
 80058fe:	d94e      	bls.n	800599e <_svfiprintf_r+0x17e>
 8005900:	b1b0      	cbz	r0, 8005930 <_svfiprintf_r+0x110>
 8005902:	9207      	str	r2, [sp, #28]
 8005904:	e014      	b.n	8005930 <_svfiprintf_r+0x110>
 8005906:	eba0 0308 	sub.w	r3, r0, r8
 800590a:	fa09 f303 	lsl.w	r3, r9, r3
 800590e:	4313      	orrs	r3, r2
 8005910:	46a2      	mov	sl, r4
 8005912:	9304      	str	r3, [sp, #16]
 8005914:	e7d2      	b.n	80058bc <_svfiprintf_r+0x9c>
 8005916:	9b03      	ldr	r3, [sp, #12]
 8005918:	1d19      	adds	r1, r3, #4
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	9103      	str	r1, [sp, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	bfbb      	ittet	lt
 8005922:	425b      	neglt	r3, r3
 8005924:	f042 0202 	orrlt.w	r2, r2, #2
 8005928:	9307      	strge	r3, [sp, #28]
 800592a:	9307      	strlt	r3, [sp, #28]
 800592c:	bfb8      	it	lt
 800592e:	9204      	strlt	r2, [sp, #16]
 8005930:	7823      	ldrb	r3, [r4, #0]
 8005932:	2b2e      	cmp	r3, #46	; 0x2e
 8005934:	d10c      	bne.n	8005950 <_svfiprintf_r+0x130>
 8005936:	7863      	ldrb	r3, [r4, #1]
 8005938:	2b2a      	cmp	r3, #42	; 0x2a
 800593a:	d135      	bne.n	80059a8 <_svfiprintf_r+0x188>
 800593c:	9b03      	ldr	r3, [sp, #12]
 800593e:	3402      	adds	r4, #2
 8005940:	1d1a      	adds	r2, r3, #4
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	9203      	str	r2, [sp, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	bfb8      	it	lt
 800594a:	f04f 33ff 	movlt.w	r3, #4294967295
 800594e:	9305      	str	r3, [sp, #20]
 8005950:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a1c <_svfiprintf_r+0x1fc>
 8005954:	2203      	movs	r2, #3
 8005956:	4650      	mov	r0, sl
 8005958:	7821      	ldrb	r1, [r4, #0]
 800595a:	f000 f9f7 	bl	8005d4c <memchr>
 800595e:	b140      	cbz	r0, 8005972 <_svfiprintf_r+0x152>
 8005960:	2340      	movs	r3, #64	; 0x40
 8005962:	eba0 000a 	sub.w	r0, r0, sl
 8005966:	fa03 f000 	lsl.w	r0, r3, r0
 800596a:	9b04      	ldr	r3, [sp, #16]
 800596c:	3401      	adds	r4, #1
 800596e:	4303      	orrs	r3, r0
 8005970:	9304      	str	r3, [sp, #16]
 8005972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005976:	2206      	movs	r2, #6
 8005978:	4825      	ldr	r0, [pc, #148]	; (8005a10 <_svfiprintf_r+0x1f0>)
 800597a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800597e:	f000 f9e5 	bl	8005d4c <memchr>
 8005982:	2800      	cmp	r0, #0
 8005984:	d038      	beq.n	80059f8 <_svfiprintf_r+0x1d8>
 8005986:	4b23      	ldr	r3, [pc, #140]	; (8005a14 <_svfiprintf_r+0x1f4>)
 8005988:	bb1b      	cbnz	r3, 80059d2 <_svfiprintf_r+0x1b2>
 800598a:	9b03      	ldr	r3, [sp, #12]
 800598c:	3307      	adds	r3, #7
 800598e:	f023 0307 	bic.w	r3, r3, #7
 8005992:	3308      	adds	r3, #8
 8005994:	9303      	str	r3, [sp, #12]
 8005996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005998:	4433      	add	r3, r6
 800599a:	9309      	str	r3, [sp, #36]	; 0x24
 800599c:	e767      	b.n	800586e <_svfiprintf_r+0x4e>
 800599e:	460c      	mov	r4, r1
 80059a0:	2001      	movs	r0, #1
 80059a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80059a6:	e7a5      	b.n	80058f4 <_svfiprintf_r+0xd4>
 80059a8:	2300      	movs	r3, #0
 80059aa:	f04f 0c0a 	mov.w	ip, #10
 80059ae:	4619      	mov	r1, r3
 80059b0:	3401      	adds	r4, #1
 80059b2:	9305      	str	r3, [sp, #20]
 80059b4:	4620      	mov	r0, r4
 80059b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059ba:	3a30      	subs	r2, #48	; 0x30
 80059bc:	2a09      	cmp	r2, #9
 80059be:	d903      	bls.n	80059c8 <_svfiprintf_r+0x1a8>
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0c5      	beq.n	8005950 <_svfiprintf_r+0x130>
 80059c4:	9105      	str	r1, [sp, #20]
 80059c6:	e7c3      	b.n	8005950 <_svfiprintf_r+0x130>
 80059c8:	4604      	mov	r4, r0
 80059ca:	2301      	movs	r3, #1
 80059cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80059d0:	e7f0      	b.n	80059b4 <_svfiprintf_r+0x194>
 80059d2:	ab03      	add	r3, sp, #12
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	462a      	mov	r2, r5
 80059d8:	4638      	mov	r0, r7
 80059da:	4b0f      	ldr	r3, [pc, #60]	; (8005a18 <_svfiprintf_r+0x1f8>)
 80059dc:	a904      	add	r1, sp, #16
 80059de:	f3af 8000 	nop.w
 80059e2:	1c42      	adds	r2, r0, #1
 80059e4:	4606      	mov	r6, r0
 80059e6:	d1d6      	bne.n	8005996 <_svfiprintf_r+0x176>
 80059e8:	89ab      	ldrh	r3, [r5, #12]
 80059ea:	065b      	lsls	r3, r3, #25
 80059ec:	f53f af2c 	bmi.w	8005848 <_svfiprintf_r+0x28>
 80059f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059f2:	b01d      	add	sp, #116	; 0x74
 80059f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f8:	ab03      	add	r3, sp, #12
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	462a      	mov	r2, r5
 80059fe:	4638      	mov	r0, r7
 8005a00:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <_svfiprintf_r+0x1f8>)
 8005a02:	a904      	add	r1, sp, #16
 8005a04:	f000 f87c 	bl	8005b00 <_printf_i>
 8005a08:	e7eb      	b.n	80059e2 <_svfiprintf_r+0x1c2>
 8005a0a:	bf00      	nop
 8005a0c:	0800607c 	.word	0x0800607c
 8005a10:	08006086 	.word	0x08006086
 8005a14:	00000000 	.word	0x00000000
 8005a18:	08005769 	.word	0x08005769
 8005a1c:	08006082 	.word	0x08006082

08005a20 <_printf_common>:
 8005a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a24:	4616      	mov	r6, r2
 8005a26:	4699      	mov	r9, r3
 8005a28:	688a      	ldr	r2, [r1, #8]
 8005a2a:	690b      	ldr	r3, [r1, #16]
 8005a2c:	4607      	mov	r7, r0
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	bfb8      	it	lt
 8005a32:	4613      	movlt	r3, r2
 8005a34:	6033      	str	r3, [r6, #0]
 8005a36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a40:	b10a      	cbz	r2, 8005a46 <_printf_common+0x26>
 8005a42:	3301      	adds	r3, #1
 8005a44:	6033      	str	r3, [r6, #0]
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	0699      	lsls	r1, r3, #26
 8005a4a:	bf42      	ittt	mi
 8005a4c:	6833      	ldrmi	r3, [r6, #0]
 8005a4e:	3302      	addmi	r3, #2
 8005a50:	6033      	strmi	r3, [r6, #0]
 8005a52:	6825      	ldr	r5, [r4, #0]
 8005a54:	f015 0506 	ands.w	r5, r5, #6
 8005a58:	d106      	bne.n	8005a68 <_printf_common+0x48>
 8005a5a:	f104 0a19 	add.w	sl, r4, #25
 8005a5e:	68e3      	ldr	r3, [r4, #12]
 8005a60:	6832      	ldr	r2, [r6, #0]
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	42ab      	cmp	r3, r5
 8005a66:	dc28      	bgt.n	8005aba <_printf_common+0x9a>
 8005a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a6c:	1e13      	subs	r3, r2, #0
 8005a6e:	6822      	ldr	r2, [r4, #0]
 8005a70:	bf18      	it	ne
 8005a72:	2301      	movne	r3, #1
 8005a74:	0692      	lsls	r2, r2, #26
 8005a76:	d42d      	bmi.n	8005ad4 <_printf_common+0xb4>
 8005a78:	4649      	mov	r1, r9
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a80:	47c0      	blx	r8
 8005a82:	3001      	adds	r0, #1
 8005a84:	d020      	beq.n	8005ac8 <_printf_common+0xa8>
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	68e5      	ldr	r5, [r4, #12]
 8005a8a:	f003 0306 	and.w	r3, r3, #6
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	bf18      	it	ne
 8005a92:	2500      	movne	r5, #0
 8005a94:	6832      	ldr	r2, [r6, #0]
 8005a96:	f04f 0600 	mov.w	r6, #0
 8005a9a:	68a3      	ldr	r3, [r4, #8]
 8005a9c:	bf08      	it	eq
 8005a9e:	1aad      	subeq	r5, r5, r2
 8005aa0:	6922      	ldr	r2, [r4, #16]
 8005aa2:	bf08      	it	eq
 8005aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	bfc4      	itt	gt
 8005aac:	1a9b      	subgt	r3, r3, r2
 8005aae:	18ed      	addgt	r5, r5, r3
 8005ab0:	341a      	adds	r4, #26
 8005ab2:	42b5      	cmp	r5, r6
 8005ab4:	d11a      	bne.n	8005aec <_printf_common+0xcc>
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	e008      	b.n	8005acc <_printf_common+0xac>
 8005aba:	2301      	movs	r3, #1
 8005abc:	4652      	mov	r2, sl
 8005abe:	4649      	mov	r1, r9
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	47c0      	blx	r8
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d103      	bne.n	8005ad0 <_printf_common+0xb0>
 8005ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8005acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad0:	3501      	adds	r5, #1
 8005ad2:	e7c4      	b.n	8005a5e <_printf_common+0x3e>
 8005ad4:	2030      	movs	r0, #48	; 0x30
 8005ad6:	18e1      	adds	r1, r4, r3
 8005ad8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ae2:	4422      	add	r2, r4
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005aea:	e7c5      	b.n	8005a78 <_printf_common+0x58>
 8005aec:	2301      	movs	r3, #1
 8005aee:	4622      	mov	r2, r4
 8005af0:	4649      	mov	r1, r9
 8005af2:	4638      	mov	r0, r7
 8005af4:	47c0      	blx	r8
 8005af6:	3001      	adds	r0, #1
 8005af8:	d0e6      	beq.n	8005ac8 <_printf_common+0xa8>
 8005afa:	3601      	adds	r6, #1
 8005afc:	e7d9      	b.n	8005ab2 <_printf_common+0x92>
	...

08005b00 <_printf_i>:
 8005b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b04:	460c      	mov	r4, r1
 8005b06:	7e27      	ldrb	r7, [r4, #24]
 8005b08:	4691      	mov	r9, r2
 8005b0a:	2f78      	cmp	r7, #120	; 0x78
 8005b0c:	4680      	mov	r8, r0
 8005b0e:	469a      	mov	sl, r3
 8005b10:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b16:	d807      	bhi.n	8005b28 <_printf_i+0x28>
 8005b18:	2f62      	cmp	r7, #98	; 0x62
 8005b1a:	d80a      	bhi.n	8005b32 <_printf_i+0x32>
 8005b1c:	2f00      	cmp	r7, #0
 8005b1e:	f000 80d9 	beq.w	8005cd4 <_printf_i+0x1d4>
 8005b22:	2f58      	cmp	r7, #88	; 0x58
 8005b24:	f000 80a4 	beq.w	8005c70 <_printf_i+0x170>
 8005b28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b30:	e03a      	b.n	8005ba8 <_printf_i+0xa8>
 8005b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b36:	2b15      	cmp	r3, #21
 8005b38:	d8f6      	bhi.n	8005b28 <_printf_i+0x28>
 8005b3a:	a001      	add	r0, pc, #4	; (adr r0, 8005b40 <_printf_i+0x40>)
 8005b3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b40:	08005b99 	.word	0x08005b99
 8005b44:	08005bad 	.word	0x08005bad
 8005b48:	08005b29 	.word	0x08005b29
 8005b4c:	08005b29 	.word	0x08005b29
 8005b50:	08005b29 	.word	0x08005b29
 8005b54:	08005b29 	.word	0x08005b29
 8005b58:	08005bad 	.word	0x08005bad
 8005b5c:	08005b29 	.word	0x08005b29
 8005b60:	08005b29 	.word	0x08005b29
 8005b64:	08005b29 	.word	0x08005b29
 8005b68:	08005b29 	.word	0x08005b29
 8005b6c:	08005cbb 	.word	0x08005cbb
 8005b70:	08005bdd 	.word	0x08005bdd
 8005b74:	08005c9d 	.word	0x08005c9d
 8005b78:	08005b29 	.word	0x08005b29
 8005b7c:	08005b29 	.word	0x08005b29
 8005b80:	08005cdd 	.word	0x08005cdd
 8005b84:	08005b29 	.word	0x08005b29
 8005b88:	08005bdd 	.word	0x08005bdd
 8005b8c:	08005b29 	.word	0x08005b29
 8005b90:	08005b29 	.word	0x08005b29
 8005b94:	08005ca5 	.word	0x08005ca5
 8005b98:	680b      	ldr	r3, [r1, #0]
 8005b9a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b9e:	1d1a      	adds	r2, r3, #4
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	600a      	str	r2, [r1, #0]
 8005ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e0a4      	b.n	8005cf6 <_printf_i+0x1f6>
 8005bac:	6825      	ldr	r5, [r4, #0]
 8005bae:	6808      	ldr	r0, [r1, #0]
 8005bb0:	062e      	lsls	r6, r5, #24
 8005bb2:	f100 0304 	add.w	r3, r0, #4
 8005bb6:	d50a      	bpl.n	8005bce <_printf_i+0xce>
 8005bb8:	6805      	ldr	r5, [r0, #0]
 8005bba:	600b      	str	r3, [r1, #0]
 8005bbc:	2d00      	cmp	r5, #0
 8005bbe:	da03      	bge.n	8005bc8 <_printf_i+0xc8>
 8005bc0:	232d      	movs	r3, #45	; 0x2d
 8005bc2:	426d      	negs	r5, r5
 8005bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc8:	230a      	movs	r3, #10
 8005bca:	485e      	ldr	r0, [pc, #376]	; (8005d44 <_printf_i+0x244>)
 8005bcc:	e019      	b.n	8005c02 <_printf_i+0x102>
 8005bce:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005bd2:	6805      	ldr	r5, [r0, #0]
 8005bd4:	600b      	str	r3, [r1, #0]
 8005bd6:	bf18      	it	ne
 8005bd8:	b22d      	sxthne	r5, r5
 8005bda:	e7ef      	b.n	8005bbc <_printf_i+0xbc>
 8005bdc:	680b      	ldr	r3, [r1, #0]
 8005bde:	6825      	ldr	r5, [r4, #0]
 8005be0:	1d18      	adds	r0, r3, #4
 8005be2:	6008      	str	r0, [r1, #0]
 8005be4:	0628      	lsls	r0, r5, #24
 8005be6:	d501      	bpl.n	8005bec <_printf_i+0xec>
 8005be8:	681d      	ldr	r5, [r3, #0]
 8005bea:	e002      	b.n	8005bf2 <_printf_i+0xf2>
 8005bec:	0669      	lsls	r1, r5, #25
 8005bee:	d5fb      	bpl.n	8005be8 <_printf_i+0xe8>
 8005bf0:	881d      	ldrh	r5, [r3, #0]
 8005bf2:	2f6f      	cmp	r7, #111	; 0x6f
 8005bf4:	bf0c      	ite	eq
 8005bf6:	2308      	moveq	r3, #8
 8005bf8:	230a      	movne	r3, #10
 8005bfa:	4852      	ldr	r0, [pc, #328]	; (8005d44 <_printf_i+0x244>)
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c02:	6866      	ldr	r6, [r4, #4]
 8005c04:	2e00      	cmp	r6, #0
 8005c06:	bfa8      	it	ge
 8005c08:	6821      	ldrge	r1, [r4, #0]
 8005c0a:	60a6      	str	r6, [r4, #8]
 8005c0c:	bfa4      	itt	ge
 8005c0e:	f021 0104 	bicge.w	r1, r1, #4
 8005c12:	6021      	strge	r1, [r4, #0]
 8005c14:	b90d      	cbnz	r5, 8005c1a <_printf_i+0x11a>
 8005c16:	2e00      	cmp	r6, #0
 8005c18:	d04d      	beq.n	8005cb6 <_printf_i+0x1b6>
 8005c1a:	4616      	mov	r6, r2
 8005c1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c20:	fb03 5711 	mls	r7, r3, r1, r5
 8005c24:	5dc7      	ldrb	r7, [r0, r7]
 8005c26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c2a:	462f      	mov	r7, r5
 8005c2c:	42bb      	cmp	r3, r7
 8005c2e:	460d      	mov	r5, r1
 8005c30:	d9f4      	bls.n	8005c1c <_printf_i+0x11c>
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d10b      	bne.n	8005c4e <_printf_i+0x14e>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	07df      	lsls	r7, r3, #31
 8005c3a:	d508      	bpl.n	8005c4e <_printf_i+0x14e>
 8005c3c:	6923      	ldr	r3, [r4, #16]
 8005c3e:	6861      	ldr	r1, [r4, #4]
 8005c40:	4299      	cmp	r1, r3
 8005c42:	bfde      	ittt	le
 8005c44:	2330      	movle	r3, #48	; 0x30
 8005c46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c4e:	1b92      	subs	r2, r2, r6
 8005c50:	6122      	str	r2, [r4, #16]
 8005c52:	464b      	mov	r3, r9
 8005c54:	4621      	mov	r1, r4
 8005c56:	4640      	mov	r0, r8
 8005c58:	f8cd a000 	str.w	sl, [sp]
 8005c5c:	aa03      	add	r2, sp, #12
 8005c5e:	f7ff fedf 	bl	8005a20 <_printf_common>
 8005c62:	3001      	adds	r0, #1
 8005c64:	d14c      	bne.n	8005d00 <_printf_i+0x200>
 8005c66:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6a:	b004      	add	sp, #16
 8005c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c70:	4834      	ldr	r0, [pc, #208]	; (8005d44 <_printf_i+0x244>)
 8005c72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c76:	680e      	ldr	r6, [r1, #0]
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c7e:	061f      	lsls	r7, r3, #24
 8005c80:	600e      	str	r6, [r1, #0]
 8005c82:	d514      	bpl.n	8005cae <_printf_i+0x1ae>
 8005c84:	07d9      	lsls	r1, r3, #31
 8005c86:	bf44      	itt	mi
 8005c88:	f043 0320 	orrmi.w	r3, r3, #32
 8005c8c:	6023      	strmi	r3, [r4, #0]
 8005c8e:	b91d      	cbnz	r5, 8005c98 <_printf_i+0x198>
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	f023 0320 	bic.w	r3, r3, #32
 8005c96:	6023      	str	r3, [r4, #0]
 8005c98:	2310      	movs	r3, #16
 8005c9a:	e7af      	b.n	8005bfc <_printf_i+0xfc>
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	f043 0320 	orr.w	r3, r3, #32
 8005ca2:	6023      	str	r3, [r4, #0]
 8005ca4:	2378      	movs	r3, #120	; 0x78
 8005ca6:	4828      	ldr	r0, [pc, #160]	; (8005d48 <_printf_i+0x248>)
 8005ca8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cac:	e7e3      	b.n	8005c76 <_printf_i+0x176>
 8005cae:	065e      	lsls	r6, r3, #25
 8005cb0:	bf48      	it	mi
 8005cb2:	b2ad      	uxthmi	r5, r5
 8005cb4:	e7e6      	b.n	8005c84 <_printf_i+0x184>
 8005cb6:	4616      	mov	r6, r2
 8005cb8:	e7bb      	b.n	8005c32 <_printf_i+0x132>
 8005cba:	680b      	ldr	r3, [r1, #0]
 8005cbc:	6826      	ldr	r6, [r4, #0]
 8005cbe:	1d1d      	adds	r5, r3, #4
 8005cc0:	6960      	ldr	r0, [r4, #20]
 8005cc2:	600d      	str	r5, [r1, #0]
 8005cc4:	0635      	lsls	r5, r6, #24
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	d501      	bpl.n	8005cce <_printf_i+0x1ce>
 8005cca:	6018      	str	r0, [r3, #0]
 8005ccc:	e002      	b.n	8005cd4 <_printf_i+0x1d4>
 8005cce:	0671      	lsls	r1, r6, #25
 8005cd0:	d5fb      	bpl.n	8005cca <_printf_i+0x1ca>
 8005cd2:	8018      	strh	r0, [r3, #0]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	4616      	mov	r6, r2
 8005cd8:	6123      	str	r3, [r4, #16]
 8005cda:	e7ba      	b.n	8005c52 <_printf_i+0x152>
 8005cdc:	680b      	ldr	r3, [r1, #0]
 8005cde:	1d1a      	adds	r2, r3, #4
 8005ce0:	600a      	str	r2, [r1, #0]
 8005ce2:	681e      	ldr	r6, [r3, #0]
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	6862      	ldr	r2, [r4, #4]
 8005cea:	f000 f82f 	bl	8005d4c <memchr>
 8005cee:	b108      	cbz	r0, 8005cf4 <_printf_i+0x1f4>
 8005cf0:	1b80      	subs	r0, r0, r6
 8005cf2:	6060      	str	r0, [r4, #4]
 8005cf4:	6863      	ldr	r3, [r4, #4]
 8005cf6:	6123      	str	r3, [r4, #16]
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cfe:	e7a8      	b.n	8005c52 <_printf_i+0x152>
 8005d00:	4632      	mov	r2, r6
 8005d02:	4649      	mov	r1, r9
 8005d04:	4640      	mov	r0, r8
 8005d06:	6923      	ldr	r3, [r4, #16]
 8005d08:	47d0      	blx	sl
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	d0ab      	beq.n	8005c66 <_printf_i+0x166>
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	079b      	lsls	r3, r3, #30
 8005d12:	d413      	bmi.n	8005d3c <_printf_i+0x23c>
 8005d14:	68e0      	ldr	r0, [r4, #12]
 8005d16:	9b03      	ldr	r3, [sp, #12]
 8005d18:	4298      	cmp	r0, r3
 8005d1a:	bfb8      	it	lt
 8005d1c:	4618      	movlt	r0, r3
 8005d1e:	e7a4      	b.n	8005c6a <_printf_i+0x16a>
 8005d20:	2301      	movs	r3, #1
 8005d22:	4632      	mov	r2, r6
 8005d24:	4649      	mov	r1, r9
 8005d26:	4640      	mov	r0, r8
 8005d28:	47d0      	blx	sl
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	d09b      	beq.n	8005c66 <_printf_i+0x166>
 8005d2e:	3501      	adds	r5, #1
 8005d30:	68e3      	ldr	r3, [r4, #12]
 8005d32:	9903      	ldr	r1, [sp, #12]
 8005d34:	1a5b      	subs	r3, r3, r1
 8005d36:	42ab      	cmp	r3, r5
 8005d38:	dcf2      	bgt.n	8005d20 <_printf_i+0x220>
 8005d3a:	e7eb      	b.n	8005d14 <_printf_i+0x214>
 8005d3c:	2500      	movs	r5, #0
 8005d3e:	f104 0619 	add.w	r6, r4, #25
 8005d42:	e7f5      	b.n	8005d30 <_printf_i+0x230>
 8005d44:	0800608d 	.word	0x0800608d
 8005d48:	0800609e 	.word	0x0800609e

08005d4c <memchr>:
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	b510      	push	{r4, lr}
 8005d50:	b2c9      	uxtb	r1, r1
 8005d52:	4402      	add	r2, r0
 8005d54:	4293      	cmp	r3, r2
 8005d56:	4618      	mov	r0, r3
 8005d58:	d101      	bne.n	8005d5e <memchr+0x12>
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	e003      	b.n	8005d66 <memchr+0x1a>
 8005d5e:	7804      	ldrb	r4, [r0, #0]
 8005d60:	3301      	adds	r3, #1
 8005d62:	428c      	cmp	r4, r1
 8005d64:	d1f6      	bne.n	8005d54 <memchr+0x8>
 8005d66:	bd10      	pop	{r4, pc}

08005d68 <memcpy>:
 8005d68:	440a      	add	r2, r1
 8005d6a:	4291      	cmp	r1, r2
 8005d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d70:	d100      	bne.n	8005d74 <memcpy+0xc>
 8005d72:	4770      	bx	lr
 8005d74:	b510      	push	{r4, lr}
 8005d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d7a:	4291      	cmp	r1, r2
 8005d7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d80:	d1f9      	bne.n	8005d76 <memcpy+0xe>
 8005d82:	bd10      	pop	{r4, pc}

08005d84 <memmove>:
 8005d84:	4288      	cmp	r0, r1
 8005d86:	b510      	push	{r4, lr}
 8005d88:	eb01 0402 	add.w	r4, r1, r2
 8005d8c:	d902      	bls.n	8005d94 <memmove+0x10>
 8005d8e:	4284      	cmp	r4, r0
 8005d90:	4623      	mov	r3, r4
 8005d92:	d807      	bhi.n	8005da4 <memmove+0x20>
 8005d94:	1e43      	subs	r3, r0, #1
 8005d96:	42a1      	cmp	r1, r4
 8005d98:	d008      	beq.n	8005dac <memmove+0x28>
 8005d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005da2:	e7f8      	b.n	8005d96 <memmove+0x12>
 8005da4:	4601      	mov	r1, r0
 8005da6:	4402      	add	r2, r0
 8005da8:	428a      	cmp	r2, r1
 8005daa:	d100      	bne.n	8005dae <memmove+0x2a>
 8005dac:	bd10      	pop	{r4, pc}
 8005dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005db2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005db6:	e7f7      	b.n	8005da8 <memmove+0x24>

08005db8 <_free_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4605      	mov	r5, r0
 8005dbc:	2900      	cmp	r1, #0
 8005dbe:	d043      	beq.n	8005e48 <_free_r+0x90>
 8005dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dc4:	1f0c      	subs	r4, r1, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	bfb8      	it	lt
 8005dca:	18e4      	addlt	r4, r4, r3
 8005dcc:	f000 f8d0 	bl	8005f70 <__malloc_lock>
 8005dd0:	4a1e      	ldr	r2, [pc, #120]	; (8005e4c <_free_r+0x94>)
 8005dd2:	6813      	ldr	r3, [r2, #0]
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	b933      	cbnz	r3, 8005de6 <_free_r+0x2e>
 8005dd8:	6063      	str	r3, [r4, #4]
 8005dda:	6014      	str	r4, [r2, #0]
 8005ddc:	4628      	mov	r0, r5
 8005dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005de2:	f000 b8cb 	b.w	8005f7c <__malloc_unlock>
 8005de6:	42a3      	cmp	r3, r4
 8005de8:	d90a      	bls.n	8005e00 <_free_r+0x48>
 8005dea:	6821      	ldr	r1, [r4, #0]
 8005dec:	1862      	adds	r2, r4, r1
 8005dee:	4293      	cmp	r3, r2
 8005df0:	bf01      	itttt	eq
 8005df2:	681a      	ldreq	r2, [r3, #0]
 8005df4:	685b      	ldreq	r3, [r3, #4]
 8005df6:	1852      	addeq	r2, r2, r1
 8005df8:	6022      	streq	r2, [r4, #0]
 8005dfa:	6063      	str	r3, [r4, #4]
 8005dfc:	6004      	str	r4, [r0, #0]
 8005dfe:	e7ed      	b.n	8005ddc <_free_r+0x24>
 8005e00:	461a      	mov	r2, r3
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	b10b      	cbz	r3, 8005e0a <_free_r+0x52>
 8005e06:	42a3      	cmp	r3, r4
 8005e08:	d9fa      	bls.n	8005e00 <_free_r+0x48>
 8005e0a:	6811      	ldr	r1, [r2, #0]
 8005e0c:	1850      	adds	r0, r2, r1
 8005e0e:	42a0      	cmp	r0, r4
 8005e10:	d10b      	bne.n	8005e2a <_free_r+0x72>
 8005e12:	6820      	ldr	r0, [r4, #0]
 8005e14:	4401      	add	r1, r0
 8005e16:	1850      	adds	r0, r2, r1
 8005e18:	4283      	cmp	r3, r0
 8005e1a:	6011      	str	r1, [r2, #0]
 8005e1c:	d1de      	bne.n	8005ddc <_free_r+0x24>
 8005e1e:	6818      	ldr	r0, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	4401      	add	r1, r0
 8005e24:	6011      	str	r1, [r2, #0]
 8005e26:	6053      	str	r3, [r2, #4]
 8005e28:	e7d8      	b.n	8005ddc <_free_r+0x24>
 8005e2a:	d902      	bls.n	8005e32 <_free_r+0x7a>
 8005e2c:	230c      	movs	r3, #12
 8005e2e:	602b      	str	r3, [r5, #0]
 8005e30:	e7d4      	b.n	8005ddc <_free_r+0x24>
 8005e32:	6820      	ldr	r0, [r4, #0]
 8005e34:	1821      	adds	r1, r4, r0
 8005e36:	428b      	cmp	r3, r1
 8005e38:	bf01      	itttt	eq
 8005e3a:	6819      	ldreq	r1, [r3, #0]
 8005e3c:	685b      	ldreq	r3, [r3, #4]
 8005e3e:	1809      	addeq	r1, r1, r0
 8005e40:	6021      	streq	r1, [r4, #0]
 8005e42:	6063      	str	r3, [r4, #4]
 8005e44:	6054      	str	r4, [r2, #4]
 8005e46:	e7c9      	b.n	8005ddc <_free_r+0x24>
 8005e48:	bd38      	pop	{r3, r4, r5, pc}
 8005e4a:	bf00      	nop
 8005e4c:	200000d4 	.word	0x200000d4

08005e50 <_malloc_r>:
 8005e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e52:	1ccd      	adds	r5, r1, #3
 8005e54:	f025 0503 	bic.w	r5, r5, #3
 8005e58:	3508      	adds	r5, #8
 8005e5a:	2d0c      	cmp	r5, #12
 8005e5c:	bf38      	it	cc
 8005e5e:	250c      	movcc	r5, #12
 8005e60:	2d00      	cmp	r5, #0
 8005e62:	4606      	mov	r6, r0
 8005e64:	db01      	blt.n	8005e6a <_malloc_r+0x1a>
 8005e66:	42a9      	cmp	r1, r5
 8005e68:	d903      	bls.n	8005e72 <_malloc_r+0x22>
 8005e6a:	230c      	movs	r3, #12
 8005e6c:	6033      	str	r3, [r6, #0]
 8005e6e:	2000      	movs	r0, #0
 8005e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e72:	f000 f87d 	bl	8005f70 <__malloc_lock>
 8005e76:	4921      	ldr	r1, [pc, #132]	; (8005efc <_malloc_r+0xac>)
 8005e78:	680a      	ldr	r2, [r1, #0]
 8005e7a:	4614      	mov	r4, r2
 8005e7c:	b99c      	cbnz	r4, 8005ea6 <_malloc_r+0x56>
 8005e7e:	4f20      	ldr	r7, [pc, #128]	; (8005f00 <_malloc_r+0xb0>)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	b923      	cbnz	r3, 8005e8e <_malloc_r+0x3e>
 8005e84:	4621      	mov	r1, r4
 8005e86:	4630      	mov	r0, r6
 8005e88:	f000 f862 	bl	8005f50 <_sbrk_r>
 8005e8c:	6038      	str	r0, [r7, #0]
 8005e8e:	4629      	mov	r1, r5
 8005e90:	4630      	mov	r0, r6
 8005e92:	f000 f85d 	bl	8005f50 <_sbrk_r>
 8005e96:	1c43      	adds	r3, r0, #1
 8005e98:	d123      	bne.n	8005ee2 <_malloc_r+0x92>
 8005e9a:	230c      	movs	r3, #12
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	6033      	str	r3, [r6, #0]
 8005ea0:	f000 f86c 	bl	8005f7c <__malloc_unlock>
 8005ea4:	e7e3      	b.n	8005e6e <_malloc_r+0x1e>
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	1b5b      	subs	r3, r3, r5
 8005eaa:	d417      	bmi.n	8005edc <_malloc_r+0x8c>
 8005eac:	2b0b      	cmp	r3, #11
 8005eae:	d903      	bls.n	8005eb8 <_malloc_r+0x68>
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	441c      	add	r4, r3
 8005eb4:	6025      	str	r5, [r4, #0]
 8005eb6:	e004      	b.n	8005ec2 <_malloc_r+0x72>
 8005eb8:	6863      	ldr	r3, [r4, #4]
 8005eba:	42a2      	cmp	r2, r4
 8005ebc:	bf0c      	ite	eq
 8005ebe:	600b      	streq	r3, [r1, #0]
 8005ec0:	6053      	strne	r3, [r2, #4]
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f000 f85a 	bl	8005f7c <__malloc_unlock>
 8005ec8:	f104 000b 	add.w	r0, r4, #11
 8005ecc:	1d23      	adds	r3, r4, #4
 8005ece:	f020 0007 	bic.w	r0, r0, #7
 8005ed2:	1ac2      	subs	r2, r0, r3
 8005ed4:	d0cc      	beq.n	8005e70 <_malloc_r+0x20>
 8005ed6:	1a1b      	subs	r3, r3, r0
 8005ed8:	50a3      	str	r3, [r4, r2]
 8005eda:	e7c9      	b.n	8005e70 <_malloc_r+0x20>
 8005edc:	4622      	mov	r2, r4
 8005ede:	6864      	ldr	r4, [r4, #4]
 8005ee0:	e7cc      	b.n	8005e7c <_malloc_r+0x2c>
 8005ee2:	1cc4      	adds	r4, r0, #3
 8005ee4:	f024 0403 	bic.w	r4, r4, #3
 8005ee8:	42a0      	cmp	r0, r4
 8005eea:	d0e3      	beq.n	8005eb4 <_malloc_r+0x64>
 8005eec:	1a21      	subs	r1, r4, r0
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f000 f82e 	bl	8005f50 <_sbrk_r>
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d1dd      	bne.n	8005eb4 <_malloc_r+0x64>
 8005ef8:	e7cf      	b.n	8005e9a <_malloc_r+0x4a>
 8005efa:	bf00      	nop
 8005efc:	200000d4 	.word	0x200000d4
 8005f00:	200000d8 	.word	0x200000d8

08005f04 <_realloc_r>:
 8005f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f06:	4607      	mov	r7, r0
 8005f08:	4614      	mov	r4, r2
 8005f0a:	460e      	mov	r6, r1
 8005f0c:	b921      	cbnz	r1, 8005f18 <_realloc_r+0x14>
 8005f0e:	4611      	mov	r1, r2
 8005f10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f14:	f7ff bf9c 	b.w	8005e50 <_malloc_r>
 8005f18:	b922      	cbnz	r2, 8005f24 <_realloc_r+0x20>
 8005f1a:	f7ff ff4d 	bl	8005db8 <_free_r>
 8005f1e:	4625      	mov	r5, r4
 8005f20:	4628      	mov	r0, r5
 8005f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f24:	f000 f830 	bl	8005f88 <_malloc_usable_size_r>
 8005f28:	42a0      	cmp	r0, r4
 8005f2a:	d20f      	bcs.n	8005f4c <_realloc_r+0x48>
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	4638      	mov	r0, r7
 8005f30:	f7ff ff8e 	bl	8005e50 <_malloc_r>
 8005f34:	4605      	mov	r5, r0
 8005f36:	2800      	cmp	r0, #0
 8005f38:	d0f2      	beq.n	8005f20 <_realloc_r+0x1c>
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	4622      	mov	r2, r4
 8005f3e:	f7ff ff13 	bl	8005d68 <memcpy>
 8005f42:	4631      	mov	r1, r6
 8005f44:	4638      	mov	r0, r7
 8005f46:	f7ff ff37 	bl	8005db8 <_free_r>
 8005f4a:	e7e9      	b.n	8005f20 <_realloc_r+0x1c>
 8005f4c:	4635      	mov	r5, r6
 8005f4e:	e7e7      	b.n	8005f20 <_realloc_r+0x1c>

08005f50 <_sbrk_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	2300      	movs	r3, #0
 8005f54:	4d05      	ldr	r5, [pc, #20]	; (8005f6c <_sbrk_r+0x1c>)
 8005f56:	4604      	mov	r4, r0
 8005f58:	4608      	mov	r0, r1
 8005f5a:	602b      	str	r3, [r5, #0]
 8005f5c:	f7fb fb9c 	bl	8001698 <_sbrk>
 8005f60:	1c43      	adds	r3, r0, #1
 8005f62:	d102      	bne.n	8005f6a <_sbrk_r+0x1a>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	b103      	cbz	r3, 8005f6a <_sbrk_r+0x1a>
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
 8005f6c:	200003b0 	.word	0x200003b0

08005f70 <__malloc_lock>:
 8005f70:	4801      	ldr	r0, [pc, #4]	; (8005f78 <__malloc_lock+0x8>)
 8005f72:	f000 b811 	b.w	8005f98 <__retarget_lock_acquire_recursive>
 8005f76:	bf00      	nop
 8005f78:	200003b8 	.word	0x200003b8

08005f7c <__malloc_unlock>:
 8005f7c:	4801      	ldr	r0, [pc, #4]	; (8005f84 <__malloc_unlock+0x8>)
 8005f7e:	f000 b80c 	b.w	8005f9a <__retarget_lock_release_recursive>
 8005f82:	bf00      	nop
 8005f84:	200003b8 	.word	0x200003b8

08005f88 <_malloc_usable_size_r>:
 8005f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f8c:	1f18      	subs	r0, r3, #4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	bfbc      	itt	lt
 8005f92:	580b      	ldrlt	r3, [r1, r0]
 8005f94:	18c0      	addlt	r0, r0, r3
 8005f96:	4770      	bx	lr

08005f98 <__retarget_lock_acquire_recursive>:
 8005f98:	4770      	bx	lr

08005f9a <__retarget_lock_release_recursive>:
 8005f9a:	4770      	bx	lr

08005f9c <_init>:
 8005f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9e:	bf00      	nop
 8005fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa2:	bc08      	pop	{r3}
 8005fa4:	469e      	mov	lr, r3
 8005fa6:	4770      	bx	lr

08005fa8 <_fini>:
 8005fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005faa:	bf00      	nop
 8005fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fae:	bc08      	pop	{r3}
 8005fb0:	469e      	mov	lr, r3
 8005fb2:	4770      	bx	lr
